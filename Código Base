import React, { useState, useEffect, useMemo } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, onAuthStateChanged } from 'firebase/auth';
import { getFirestore, collection, doc, addDoc, setDoc, getDoc, getDocs, onSnapshot, deleteDoc, query, where, orderBy, limit, updateDoc } from 'firebase/firestore';
import { getStorage } from "firebase/storage";
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { Plus, Dumbbell, User, BarChart2, Trash2, Edit, ArrowLeft, Search, X, Calendar, Activity, ChevronLeft, ChevronRight, Sparkles, Info, Users, LogIn, CheckCircle, LogOut, Save, RefreshCw } from 'lucide-react';

// --- DADOS DOS EXERCÍCIOS (Completos e Corrigidos) ---
const exerciseLibrary = [
    { id: 'ex101', name: 'Ab rollout (roda de abdominal)', muscleGroup: 'Core/Abdominais', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/bwdPuXhgTcQ', description: 'Ajoelhe-se no chão e segure a roda de abdominal com ambas as mãos. Role a roda para a frente, estendendo o corpo o máximo possível sem arquear as costas. Retorne à posição inicial de forma controlada.' },
    { id: 'ex102', name: 'Abdominal com bola medicinal', muscleGroup: 'Core/Abdominais', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/ZxUuqhKttsc', description: 'Deite-se de costas com os joelhos flexionados. Segure uma bola medicinal com os braços estendidos. Eleve o tronco, contraindo o abdômen, e leve a bola em direção aos joelhos.' },
    { id: 'ex103', name: 'Abdominal com elástico', muscleGroup: 'Core/Abdominais', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/JSNQ87X-ihI', description: 'Ajoelhe-se de costas para uma polia alta ou ponto de fixação do elástico. Segure o elástico com ambas as mãos na altura da cabeça e flexione o tronco para a frente, contraindo o abdômen.' },
    { id: 'ex104', name: 'Abdominal com kettlebell', muscleGroup: 'Core/Abdominais', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/OzK1nh5rIrU', description: 'Deite-se de costas e segure um kettlebell com ambas as mãos sobre o peito. Eleve o tronco, mantendo o kettlebell estável, e contraia o abdômen.' },
    { id: 'ex105', name: 'Abdominal infra com pernas elevadas', muscleGroup: 'Core/Abdominais', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/TgTwDFaWCPY', description: 'Deite-se de costas com as mãos sob o quadril para apoio. Eleve as pernas estendidas até formarem um ângulo de 90 graus com o chão e desça lentamente, sem tocar o solo.' },
    { id: 'ex106', name: 'Abdominal infra na paralela', muscleGroup: 'Core/Abdominais', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/neYQzepIfFE', description: 'Apoie os antebraços nas barras paralelas e mantenha o corpo suspenso. Eleve os joelhos em direção ao peito, contraindo a parte inferior do abdômen. Desça de forma controlada.' },
    { id: 'ex107', name: 'Abdominal lateral (obliques)', muscleGroup: 'Core/Abdominais', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/-WjHb4OEpLM', description: 'Deite-se de lado com as pernas flexionadas. Coloque a mão de cima atrás da cabeça e eleve o tronco lateralmente, contraindo os músculos oblíquos.' },
    { id: 'ex108', name: 'Abdominal na roda suspensa', muscleGroup: 'Core/Abdominais', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/KTOto_msRUM', description: 'Em posição de prancha, coloque os pés em alças suspensas (TRX). Puxe os joelhos em direção ao peito, mantendo o core ativado. Retorne à posição inicial.' },
    { id: 'ex109', name: 'Abdominal no banco declinado', muscleGroup: 'Core/Abdominais', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/vdNB0pyj2Os', description: 'Posicione-se em um banco declinado com os pés presos. Com as mãos no peito ou atrás da cabeça, eleve o tronco em direção aos joelhos.' },
    { id: 'ex110', name: 'Abdominal oblíquo no cross', muscleGroup: 'Core/Abdominais', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/0PiFYPuHrSM', description: 'Em pé, ao lado de uma polia alta, segure o puxador com ambas as mãos. Puxe o cabo para baixo e na diagonal, rotacionando o tronco e contraindo os oblíquos.' },
    { id: 'ex111', name: 'Abdominal reto na máquina', muscleGroup: 'Core/Abdominais', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/f783163as1M', description: 'Sente-se na máquina de abdominal e posicione os apoios nos ombros ou peito. Flexione o tronco para a frente, contraindo o abdômen contra a resistência.' },
    { id: 'ex112', name: 'Abdominal supra solo', muscleGroup: 'Core/Abdominais', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/Cp05KnGAHW0', description: 'Deite-se de costas com os joelhos flexionados e os pés no chão. Com as mãos atrás da cabeça ou no peito, eleve a parte superior das costas do chão, contraindo o abdômen.' },
    { id: 'ex113', name: 'Abdominal V-up', muscleGroup: 'Core/Abdominais', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/sTYhTDmcVbE', description: 'Deite-se de costas com braços e pernas estendidos. Simultaneamente, eleve o tronco e as pernas, tentando tocar as mãos nos pés, formando um "V" com o corpo.' },
    { id: 'ex011', name: 'Afundo (lunge) com halteres', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/w8Ar4bgxizw', description: 'Segure um halter em cada mão. Dê um passo à frente, flexionando ambos os joelhos a 90 graus, sem deixar o joelho de trás tocar no chão. Retorne e alterne as pernas.' },
    { id: 'ex012', name: 'Agachamento búlgaro', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/v-bItsW7fUI', description: 'Posicione o peito de um pé em um banco atrás de você. Agache com a perna da frente até que a coxa fique paralela ao chão. Mantenha o equilíbrio e o tronco ereto.' },
    { id: 'ex013', name: 'Agachamento com halteres', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/Gdcc_9SepeI', description: 'Segure um halter em cada mão ao lado do corpo. Agache como se fosse sentar, mantendo as costas retas e o peito aberto. Volte à posição inicial.' },
    { id: 'ex014', name: 'Agachamento com kettlebell (goblet)', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/3h1A9GfB07w', description: 'Segure um kettlebell com ambas as mãos na frente do peito. Mantenha os cotovelos apontados para baixo e agache profundamente, mantendo as costas retas.' },
    { id: 'ex114', name: 'Agachamento com kettlebell overhead', muscleGroup: 'Funcionais/Livre', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/dzUVtOtPzeo', description: 'Segure um kettlebell com um braço estendido acima da cabeça. Agache mantendo o braço travado e o tronco o mais vertical possível. Exige muita estabilidade.' },
    { id: 'ex015', name: 'Agachamento com miniband', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/JpZQgedD9Zo', description: 'Coloque uma miniband acima dos joelhos. Agache mantendo os joelhos afastados, criando tensão na faixa. Isso ativa os músculos glúteos.' },
    { id: 'ex115', name: 'Agachamento com salto', muscleGroup: 'Funcionais/Livre', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/p6miSld2sGs', description: 'Realize um agachamento normal e, ao subir, salte o mais alto que puder. Aterrisse suavemente, absorvendo o impacto e já iniciando o próximo agachamento.' },
    { id: 'ex016', name: 'Agachamento frontal com barra', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/pYIpBFnong0', description: 'Apoie a barra na parte da frente dos ombros, com os cotovelos elevados. Agache profundamente, mantendo o tronco o mais vertical possível. Exige mais do quadríceps.' },
    { id: 'ex017', name: 'Agachamento isométrico na parede', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/sHxPFpaB6W4', description: 'Encoste as costas na parede e deslize para baixo até que os joelhos formem um ângulo de 90 graus, como se estivesse sentado em uma cadeira. Mantenha a posição.' },
    { id: 'ex018', name: 'Agachamento lateral', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/LlDx9eILoI0', description: 'Em pé, com os pés afastados, dê um passo para o lado e agache sobre essa perna, mantendo a outra estendida. Alterne os lados.' },
    { id: 'ex002', name: 'Agachamento Livre', muscleGroup: 'Quadríceps, Glúteos, Isquiotibiais', gifUrl: 'https://i.imgur.com/Jp46n2n.gif', videoUrl: 'https://www.youtube.com/embed/86ZW7tmmLuU', description: 'Com a barra apoiada nos ombros, agache como se fosse sentar em uma cadeira, mantendo as costas retas. Volte à posição inicial.' },
    { id: 'ex019', name: 'Agachamento no TRX', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/RAyFXSLWTOY', description: 'Segure as alças do TRX com os braços estendidos à sua frente. Use as alças como apoio para agachar com a postura correta e maior amplitude.' },
    { id: 'ex020', name: 'Agachamento overhead (com barra sobre a cabeça)', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/_SoYo2f6VGU', description: 'Segure a barra com uma pegada bem aberta e estenda os braços acima da cabeça. Agache profundamente, mantendo a barra alinhada com os calcanhares. Exige mobilidade e estabilidade.' },
    { id: 'ex021', name: 'Agachamento Smith (máquina)', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/LK-ktgN3S1w', description: 'Posicione a barra do Smith nos ombros. Agache de forma controlada. A máquina guia o movimento, permitindo focar em diferentes posicionamentos dos pés.' },
    { id: 'ex022', name: 'Agachamento sumô', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/TZUCB2OfSaQ', description: 'Posicione os pés bem afastados, com as pontas apontadas para fora. Agache, mantendo os joelhos alinhados com os pés. Foca mais na parte interna das coxas e glúteos.' },
    { id: 'ex023', name: 'Avanço com barra', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/fxOOg7L-MYg', description: 'Posicione a barra sobre os ombros. Dê um passo à frente com uma perna, flexionando ambos os joelhos até formarem um ângulo de 90 graus. Retorne à posição inicial e alterne as pernas.' },
    { id: 'ex024', name: 'Avanço cruzado', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/sTOoxPMVAyE', description: 'Segurando halteres, dê um passo para trás e na diagonal, cruzando a perna por trás da perna de apoio. Agache. Foca nos glúteos.' },
    { id: 'ex025', name: 'Avanço no step', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/qat8JImndfo', description: 'Posicione um step à sua frente. Dê um passo à frente, colocando o pé sobre o step, e agache. A elevação aumenta a amplitude do movimento.' },
    { id: 'ex026', name: 'Barra fixa (pull-up)', muscleGroup: 'Costas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/NKb8JFhSeRY', description: 'Segure a barra com as mãos um pouco mais afastadas que a largura dos ombros e as palmas viradas para a frente. Puxe o corpo para cima até o queixo passar da barra.' },
    { id: 'ex027', name: 'Barra fixa com pegada supinada (chin-up)', muscleGroup: 'Costas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/4Kbc-hWBdu0', description: 'Segure a barra com as mãos na largura dos ombros e as palmas viradas para você. Puxe o corpo para cima até o queixo passar da barra. Enfatiza mais o bíceps.' },
    { id: 'ex116', name: 'Battle rope (cordas pesadas)', muscleGroup: 'Funcionais/Livre', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/JwepS5QiAzs', description: 'Segure uma ponta da corda em cada mão. Faça movimentos ondulatórios, batendo as cordas no chão de forma alternada ou simultânea. É um ótimo exercício cardiovascular e de resistência.' },
    { id: 'ex117', name: 'Bicicleta airbike', muscleGroup: 'Cardio/Condicionamento', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/tmAqOi_3-dM', description: 'Sente-se na airbike e use braços e pernas para movimentar a máquina. A resistência é gerada pelo ar, então quanto mais rápido você pedala, mais difícil fica.' },
    { id: 'ex118', name: 'Bicicleta ergométrica', muscleGroup: 'Cardio/Condicionamento', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/zFSTteth0qU', description: 'Ajuste o banco e o guidão. Pedale em um ritmo constante, ajustando a resistência conforme o objetivo do treino (aquecimento, cardio moderado ou HIIT).' },
    { id: 'ex119', name: 'Burpee', muscleGroup: 'Funcionais/Livre', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/Zd42fF5W6t8', description: 'Comece em pé, agache, coloque as mãos no chão, salte para a posição de prancha, faça uma flexão, retorne à posição de agachamento e salte para cima com os braços estendidos.' },
    { id: 'ex028', name: 'Cadeira abdutora', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/50qHGus1TZk', description: 'Sente-se na máquina com a parte externa dos joelhos contra os apoios. Empurre as pernas para fora, afastando os joelhos, para trabalhar os músculos glúteos.' },
    { id: 'ex029', name: 'Cadeira abdutora com isometria', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/f0TUMqDxc_o', description: 'Execute o movimento na cadeira abdutora e segure na posição de máxima contração por alguns segundos antes de retornar lentamente.' },
    { id: 'ex030', name: 'Cadeira adutora', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/j89UutyyEfw', description: 'Sente-se na máquina com a parte interna dos joelhos contra os apoios. Aperte as pernas, juntando os joelhos, para trabalhar a parte interna das coxas.' },
    { id: 'ex031', name: 'Cadeira extensora', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/y7GhuVphn4s', description: 'Sente-se na máquina e posicione os tornozelos sob o apoio. Estenda os joelhos, elevando o peso, para trabalhar o quadríceps.' },
    { id: 'ex032', name: 'Cadeira flexora', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/c3cng1WqREQ', description: 'Deite-se de bruços na máquina e posicione os tornozelos sob o apoio. Flexione os joelhos, trazendo os calcanhares em direção aos glúteos, para trabalhar os isquiotibiais.' },
    { id: 'ex033', name: 'Cadeira flexora unilateral', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/vl64tUJrFIQ', description: 'Execute o movimento na cadeira flexora utilizando uma perna de cada vez para focar em cada músculo individualmente e corrigir desequilíbrios.' },
    { id: 'ex120', name: 'Corrida com elástico de resistência', muscleGroup: 'Cardio/Condicionamento', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/6QbGMECQrcU', description: 'Com um elástico de resistência preso à sua cintura e a um ponto fixo (ou segurado por um parceiro), corra para a frente contra a tensão do elástico.' },
    { id: 'ex121', name: 'Corrida de agilidade com escada', muscleGroup: 'Cardio/Condicionamento', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/gfHFxJqCrsM', description: 'Realize diferentes padrões de movimento dos pés dentro de uma escada de agilidade no chão para melhorar a coordenação, velocidade e agilidade.' },
    { id: 'ex122', name: 'Corrida lateral com cones', muscleGroup: 'Cardio/Condicionamento', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/A0P_5zyblX4', description: 'Posicione cones em linha reta. Desloque-se lateralmente, tocando em cada cone, sem cruzar os pés. Melhora a agilidade e a movimentação lateral.' },
    { id: 'ex123', name: 'Corrida na esteira', muscleGroup: 'Cardio/Condicionamento', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/giU6RzEkalc', description: 'Ajuste a velocidade e a inclinação da esteira de acordo com seu objetivo. Pode ser usada para aquecimento, corrida contínua ou treinos intervalados (HIIT).' },
    { id: 'ex124', name: 'Corrida no lugar com joelho alto', muscleGroup: 'Funcionais/Livre', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/SU4gKTV4ZAQ', description: 'Corra no lugar, elevando os joelhos o mais alto possível a cada passo. Mantenha o core ativado e movimente os braços para ajudar no impulso.' },
    { id: 'ex034', name: 'Crossover na polia', muscleGroup: 'Peito', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/pdMWt71MPlw', description: 'Posicione as polias na parte alta. Segure os puxadores e dê um passo à frente. Com os cotovelos levemente flexionados, junte as mãos na frente do corpo, contraindo o peitoral.' },
    { id: 'ex125', name: 'Crunch com peso', muscleGroup: 'Core/Abdominais', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/P97fFIxq--M', description: 'Deite-se de costas e segure uma anilha ou halter sobre o peito. Realize o movimento de abdominal supra, elevando a parte superior das costas do chão.' },
    { id: 'ex035', name: 'Crucifixo com cabo na polia alta', muscleGroup: 'Peito', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/gub6tCtvdRQ', description: 'Posicione as polias na parte alta. Segure os puxadores com os braços abertos e levemente flexionados. Junte as mãos à frente do corpo em um movimento de arco.' },
    { id: 'ex036', name: 'Crucifixo com halteres (reto)', muscleGroup: 'Peito', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/vut37R3Ue80', description: 'Deite-se em um banco reto, segurando um halter em cada mão acima do peito. Abra os braços para os lados, com uma leve flexão nos cotovelos, e retorne à posição inicial.' },
    { id: 'ex037', name: 'Crucifixo inclinado', muscleGroup: 'Peito', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/QSfJldUmjqk', description: 'Deite-se em um banco inclinado. Execute o movimento de crucifixo com halteres para focar na porção superior do músculo peitoral.' },
    { id: 'ex038', name: 'Crucifixo no crossover baixo', muscleGroup: 'Peito', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/acqBZwyr1MY', description: 'Posicione as polias na parte baixa. Segure os puxadores e eleve os braços em um movimento de arco para cima e para dentro, focando na parte inferior e interna do peito.' },
    { id: 'ex039', name: 'Deadlift romeno', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/oQwnGfZFfzw', description: 'Segure a barra ou halteres na frente das coxas. Com os joelhos quase estendidos, flexione o quadril, descendo o peso rente às pernas. Foque em alongar os isquiotibiais.' },
    { id: 'ex040', name: 'Desenvolvimento Arnold', muscleGroup: 'Ombros', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/MXB9sPuTsBs', description: 'Sentado, segure os halteres à frente do corpo com as palmas viradas para você. Eleve os halteres enquanto rotaciona os punhos, terminando com as palmas para a frente.' },
    { id: 'ex041', name: 'Desenvolvimento com barra', muscleGroup: 'Ombros', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/zXW9SA68wqM', description: 'Sentado ou em pé, segure a barra na altura dos ombros com as palmas para a frente. Empurre a barra para cima até a extensão completa dos cotovelos.' },
    { id: 'ex042', name: 'Desenvolvimento com barra no Smith', muscleGroup: 'Ombros', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/eznh_yqgUc0', description: 'Sente-se em um banco dentro da máquina Smith. Execute o desenvolvimento de ombros. A máquina oferece estabilidade, permitindo focar na carga.' },
    { id: 'ex043', name: 'Desenvolvimento com halteres', muscleGroup: 'Ombros', gifUrl: 'https://i.imgur.com/5y4f3fF.gif', videoUrl: 'https://www.youtube.com/embed/eufDL9MmF8A', description: 'Sentado em um banco, segure os halteres na altura dos ombros. Empurre-os para cima até estender os braços.' },
    { id: 'ex044', name: 'Desenvolvimento com kettlebell', muscleGroup: 'Ombros', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/ed5tHK8KNTY', description: 'Segure um kettlebell em posição de rack (no ombro). Empurre-o para cima até a extensão completa do braço. Pode ser feito unilateralmente ou com ambos os braços.' },
    { id: 'ex045', name: 'Desenvolvimento na máquina', muscleGroup: 'Ombros', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/_ht7iL-Ei5k', description: 'Sente-se na máquina de desenvolvimento e segure os pegadores. Empurre para cima contra a resistência até a extensão dos braços.' },
    { id: 'ex046', name: 'Desenvolvimento no cross com corda', muscleGroup: 'Ombros', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/xpSAQ-lgjH4', description: 'Ajoelhe-se de frente para uma polia alta com o puxador de corda. Segure a corda e puxe-a para baixo e para os lados, rotacionando externamente os ombros. Foca no manguito rotador.' },
    { id: 'ex047', name: 'Desenvolvimento unilateral com halter', muscleGroup: 'Ombros', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/y92XRspp19Y', description: 'Execute o desenvolvimento com halteres usando um braço de cada vez. Isso exige mais estabilidade do core e ajuda a corrigir desequilíbrios de força.' },
    { id: 'ex126', name: 'Dragon flag', muscleGroup: 'Core/Abdominais', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/u42QKOUjSCo', description: 'Deitado em um banco, segure-o atrás da cabeça. Eleve todo o corpo, mantendo-o reto, e desça lentamente, controlando o movimento com o core. Exercício avançado.' },
    { id: 'ex048', name: 'Elevação de panturrilha em pé (máquina)', muscleGroup: 'Panturrilhas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/SfubMNxu508', description: 'Posicione os ombros sob os apoios da máquina. Fique na ponta dos pés, elevando os calcanhares o máximo possível. Desça de forma controlada.' },
    { id: 'ex049', name: 'Elevação de panturrilha sentado', muscleGroup: 'Panturrilhas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/IwPuUqijYj0', description: 'Sente-se na máquina e posicione os joelhos sob o apoio. Eleve os calcanhares, empurrando o peso para cima. Foca no músculo sóleo.' },
    { id: 'ex127', name: 'Elevação de pernas na barra', muscleGroup: 'Core/Abdominais', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/AkcAg5suq6Y', description: 'Pendurado em uma barra fixa, eleve as pernas estendidas o mais alto possível, idealmente até tocarem a barra. Desça de forma controlada.' },
    { id: 'ex128', name: 'Elevação de pernas suspenso no TRX', muscleGroup: 'Core/Abdominais', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/3dlxJ8rYj84', description: 'Em posição de prancha com os pés nas alças do TRX, eleve o quadril e puxe as pernas em direção ao peito, mantendo-as retas.' },
    { id: 'ex050', name: 'Elevação frontal', muscleGroup: 'Ombros', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/wRqvgN7sSow', description: 'Segurando halteres, uma barra ou uma anilha, eleve os braços para a frente até a altura dos ombros, mantendo os cotovelos levemente flexionados.' },
    { id: 'ex051', name: 'Elevação frontal alternada com halteres', muscleGroup: 'Ombros', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/GbyE4ckUu_E', description: 'Em pé, segure um halter em cada mão. Eleve um braço de cada vez para a frente, até a altura dos ombros. Mantenha o core estável.' },
    { id: 'ex052', name: 'Elevação frontal com anilha', muscleGroup: 'Ombros', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/h7hntjgO6Ks', description: 'Segure uma anilha com ambas as mãos. Eleve-a à sua frente com os braços estendidos até a altura dos ombros.' },
    { id: 'ex007', name: 'Elevação Lateral', muscleGroup: 'Ombros', gifUrl: 'https://i.imgur.com/sV5L43Q.gif', videoUrl: 'https://www.youtube.com/embed/LKflJ7S7WfI', description: 'Em pé, segure um halter em cada mão. Eleve os braços para os lados até a altura dos ombros.' },
    { id: 'ex053', name: 'Elevação lateral com elástico', muscleGroup: 'Ombros', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/DcQ_RJZIqyQ', description: 'Pise no meio de um elástico e segure as pontas. Eleve os braços para os lados contra a resistência do elástico.' },
    { id: 'ex054', name: 'Elevação lateral no banco inclinado', muscleGroup: 'Ombros', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/zA_RKAHGjHg', description: 'Deite-se de lado em um banco inclinado. Segure um halter e eleve-o lateralmente. A inclinação aumenta o foco na porção medial do deltoide.' },
    { id: 'ex055', name: 'Elevação lateral no cross', muscleGroup: 'Ombros', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/Eol1mCX8i2g', description: 'Posicione a polia na altura mais baixa. Fique de lado e, com o braço oposto, puxe o cabo para cima e para o lado, realizando a elevação lateral.' },
    { id: 'ex056', name: 'Elevação lateral unilateral', muscleGroup: 'Ombros', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/xu7XW_a3fq4', description: 'Realize a elevação lateral com um braço de cada vez. Segure em um ponto de apoio com a outra mão para maior estabilidade.' },
    { id: 'ex057', name: 'Elevação pélvica (Hip thrust)', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/5eZjU7vMJK4', description: 'Deite-se no chão com os joelhos flexionados. Eleve o quadril o máximo que puder, contraindo os glúteos. Pode ser feito com peso sobre o quadril.' },
    { id: 'ex058', name: 'Elevação pélvica com barra e banco', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/1qVDDCXbfks', description: 'Apoie a parte superior das costas em um banco e os pés no chão. Posicione uma barra sobre o quadril. Eleve o quadril até o corpo ficar reto, contraindo os glúteos.' },
    { id: 'ex059', name: 'Elevação posterior (voador reverso)', muscleGroup: 'Ombros', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/NW6DA72tJ4U', description: 'Sente-se na máquina de voador, virado para o aparelho. Segure os pegadores e abra os braços para trás, contraindo a parte posterior dos ombros.' },
    { id: 'ex060', name: 'Elevação posterior no banco', muscleGroup: 'Ombros', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/7dVZ898q8Zg', description: 'Deite-se de bruços em um banco inclinado. Segure halteres e eleve os braços para os lados, com os cotovelos levemente flexionados, focando na parte de trás dos ombros.' },
    { id: 'ex129', name: 'Elíptico', muscleGroup: 'Cardio/Condicionamento', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/9LkhkzGDq-c', description: 'Suba no aparelho e movimente as pernas em um padrão elíptico. Use os braços para um treino de corpo inteiro. Ajuste a resistência e a inclinação conforme desejado.' },
    { id: 'ex061', name: 'Encolhimento com halteres', muscleGroup: 'Ombros', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/oOJESwyT47k', description: 'Em pé, segure um halter pesado em cada mão. Encolha os ombros, elevando-os o máximo possível em direção às orelhas. Foque no músculo trapézio.' },
    { id: 'ex062', name: 'Encolhimento de ombros com barra', muscleGroup: 'Ombros', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/B5nkXSil68o', description: 'Segure uma barra à frente do corpo. Encolha os ombros para cima, sem flexionar os cotovelos. Controle a descida.' },
    { id: 'ex130', name: 'Escada (step machine)', muscleGroup: 'Cardio/Condicionamento', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/LM9lgFK4mkk', description: 'Simula o movimento de subir escadas. Mantenha uma postura ereta e um ritmo constante. Ótimo para cardio e para trabalhar pernas e glúteos.' },
    { id: 'ex063', name: 'Extensão de quadril com elástico', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/TifmESiqyM4', description: 'Prenda um elástico no tornozelo e em um ponto fixo baixo. Mantenha o corpo estável e estenda a perna para trás contra a resistência, contraindo o glúteo.' },
    { id: 'ex064', name: 'Extensão de quadril na polia', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/ZpXyRoar-WU', description: 'Em frente a uma polia baixa, prenda o cabo no tornozelo. Dê um passo para trás e estenda a perna para trás e para cima, contraindo o glúteo.' },
    { id: 'ex131', name: 'Farmer walk com halteres', muscleGroup: 'Funcionais/Livre', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/CeUKHZFNYHs', description: 'Segure um halter pesado em cada mão, como se estivesse carregando malas. Caminhe por uma distância determinada, mantendo a postura ereta e o core ativado.' },
    { id: 'ex065', name: 'Flexão com pegada aberta', muscleGroup: 'Peito', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/ad--Isjh5N0', description: 'Realize uma flexão de braço com as mãos posicionadas mais afastadas que a largura dos ombros. Foca mais na parte externa do peitoral.' },
    { id: 'ex066', name: 'Flexão com pegada fechada', muscleGroup: 'Peito', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/667qdBlkSNk', description: 'Realize uma flexão de braço com as mãos posicionadas mais próximas que a largura dos ombros. Enfatiza mais o trabalho dos tríceps e da parte interna do peito.' },
    { id: 'ex067', name: 'Flexão de braço (push-up)', muscleGroup: 'Peito', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/pRzxpe5_LLk', description: 'Em posição de prancha, com as mãos na largura dos ombros, desça o corpo até o peito quase tocar o chão e empurre de volta para a posição inicial.' },
    { id: 'ex132', name: 'Flexão de braço com apoio elevado', muscleGroup: 'Funcionais/Livre', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/OqHDYJ8dEJg', description: 'Realize a flexão de braço com as mãos apoiadas em um banco ou caixa. Quanto mais alto o apoio, mais fácil o exercício se torna.' },
    { id: 'ex068', name: 'Flexão declinada', muscleGroup: 'Peito', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/vtnAwuBNGL8', description: 'Posicione os pés em um banco ou superfície elevada e as mãos no chão. Realize a flexão. Foca na porção superior do músculo peitoral.' },
    { id: 'ex069', name: 'Flexão diamante', muscleGroup: 'Peito', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/PAauHMIhWKg', description: 'Posicione as mãos no chão bem próximas, formando um diamante com os polegares e indicadores. Realize a flexão. Foco intenso nos tríceps.' },
    { id: 'ex133', name: 'Flexão explosiva (clap push-up)', muscleGroup: 'Funcionais/Livre', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/EYwWCgM198U', description: 'Execute uma flexão e empurre o corpo para cima com força suficiente para tirar as mãos do chão e bater uma palma no ar antes de aterrissar.' },
    { id: 'ex070', name: 'Flexão inclinada', muscleGroup: 'Peito', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/TfzlcE4293c', description: 'Posicione as mãos em um banco ou parede e os pés no chão. Realize a flexão. É uma variação mais fácil, ideal para iniciantes.' },
    { id: 'ex071', name: 'Flexão no TRX', muscleGroup: 'Peito', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/ggYWPw8_3gI', description: 'Com os pés nas alças do TRX e as mãos no chão, realize a flexão. A instabilidade aumenta o desafio para o core e os músculos estabilizadores.' },
    { id: 'ex072', name: 'Glute bridge com miniband', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/xmpas2XEiEA', description: 'Deite-se de costas com os joelhos flexionados e uma miniband acima deles. Eleve o quadril, mantendo a tensão na band, e contraia os glúteos. Retorne lentamente.' },
    { id: 'ex073', name: 'Glute kickback (coice) na polia', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/Y879E88U4b8', description: 'Ajoelhe-se em frente à polia baixa com o cabo preso ao tornozelo. Mantenha as costas retas e estenda a perna para trás, contraindo o glúteo. Controle o retorno.' },
    { id: 'ex134', name: 'High knees com batida de mão', muscleGroup: 'Cardio/Condicionamento', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/0X0Q8wKLEfo', description: 'Corra no lugar, elevando os joelhos o mais alto possível. Bata com as mãos nos joelhos a cada elevação para garantir a altura.' },
    { id: 'ex135', name: 'Jumping jacks', muscleGroup: 'Funcionais/Livre', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/VSwW6_V9a7o', description: 'Comece em pé com os pés juntos e os braços ao lado do corpo. Salte, afastando as pernas e elevando os braços acima da cabeça. Retorne à posição inicial com outro salto.' },
    { id: 'ex136', name: 'Jump rope (corda)', muscleGroup: 'Cardio/Condicionamento', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/FnezOFKtIAU', description: 'Salte continuamente enquanto gira a corda, passando-a por baixo dos pés e sobre a cabeça. Mantenha um ritmo constante.' },
    { id: 'ex137', name: 'Kettlebell clean and press', muscleGroup: 'Funcionais/Livre', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/G7bqiy7oafg', description: 'Com o kettlebell no chão, puxe-o para a posição de rack (no ombro) e, em seguida, empurre-o para cima até estender o braço completamente.' },
    { id: 'ex138', name: 'Kettlebell swing', muscleGroup: 'Funcionais/Livre', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/n1df4ASFeZU', description: 'Segure o kettlebell com ambas as mãos. Flexione os quadris para trás, balançando o peso entre as pernas, e depois estenda os quadris explosivamente para elevar o kettlebell até a altura do peito.' },
    { id: 'ex074', name: 'Kickback com halteres', muscleGroup: 'Tríceps', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/XJV627mCN3s', description: 'Incline o tronco para a frente com um joelho e mão apoiados em um banco. Segure um halter e estenda o cotovelo para trás, contraindo o tríceps. Mantenha o braço fixo.' },
    { id: 'ex139', name: 'L-sit (isometria de pernas)', muscleGroup: 'Funcionais/Livre', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/-kGKLoE_I9g', description: 'Apoiado em barras paralelas ou no chão, eleve as pernas estendidas à sua frente, formando um "L" com o corpo. Mantenha a posição. Exige força no core e nos braços.' },
    { id: 'ex140', name: 'Lançamento de medicine ball no chão', muscleGroup: 'Funcionais/Livre', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/MrzI1oYb8WI', description: 'Segure uma medicine ball acima da cabeça com os braços estendidos e lance-a com força no chão à sua frente. Use a força do core e dos braços.' },
    { id: 'ex008', name: 'Leg Press 45', muscleGroup: 'Quadríceps, Glúteos', gifUrl: 'https://i.imgur.com/eCg32yS.gif', videoUrl: 'https://www.youtube.com/embed/oz5tSijyIfg', description: 'Sente-se no aparelho e posicione os pés na plataforma. Empurre a plataforma até estender as pernas e retorne de forma controlada.' },
    { id: 'ex003', name: 'Levantamento Terra', muscleGroup: 'Costas, Glúteos, Isquiotibiais', gifUrl: 'https://i.imgur.com/w4rLz9T.gif', videoUrl: 'https://www.youtube.com/embed/ASO89bLkLqU', description: 'Com os pés na largura dos quadris, agache e segure a barra. Levante o peso estendendo os quadris e joelhos, mantendo as costas retas.' },
    { id: 'ex141', name: 'Mountain climber', muscleGroup: 'Funcionais/Livre', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/Eni-G2H-WUA', description: 'Em posição de prancha, puxe um joelho em direção ao peito e alterne as pernas rapidamente, como se estivesse correndo na horizontal.' },
    { id: 'ex075', name: 'Panturrilha com barra livre', muscleGroup: 'Panturrilhas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/tg7mQZCIMh0', description: 'Posicione uma barra sobre os ombros, como no agachamento. Fique na ponta dos pés, elevando os calcanhares o máximo possível.' },
    { id: 'ex076', name: 'Panturrilha com halteres em step', muscleGroup: 'Panturrilhas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/B9TT2K4zFow', description: 'Segure um halter em cada mão e posicione a ponta dos pés em um step ou degrau. Deixe os calcanhares descerem para alongar e depois eleve-os.' },
    { id: 'ex077', name: 'Panturrilha com kettlebell', muscleGroup: 'Panturrilhas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/AmVpQnEK5nU', description: 'Segure um ou dois kettlebells e realize a elevação dos calcanhares, ficando na ponta dos pés.' },
    { id: 'ex078', name: 'Panturrilha em degrau com peso', muscleGroup: 'Panturrilhas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/HAGNobxJZN4', description: 'Segurando um peso, posicione a ponta de um pé em um degrau. Faça a elevação do calcanhar, trabalhando uma perna de cada vez.' },
    { id: 'ex079', name: 'Panturrilha isométrica', muscleGroup: 'Panturrilhas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/ovS6pDTug08', description: 'Eleve os calcanhares, ficando na ponta dos pés, e mantenha a posição de contração máxima por um tempo determinado.' },
    { id: 'ex080', name: 'Panturrilha na leg press unilateral', muscleGroup: 'Panturrilhas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/GgAD12tu22c', description: 'No aparelho de leg press, posicione a ponta de um pé na plataforma e empurre, estendendo o tornozelo. Trabalhe uma perna de cada vez.' },
    { id: 'ex081', name: 'Panturrilha no leg press', muscleGroup: 'Panturrilhas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/ClGPnxuKXNQ', description: 'No aparelho de leg press, posicione a ponta dos pés na parte inferior da plataforma. Empurre a plataforma estendendo os tornozelos.' },
    { id: 'ex082', name: 'Panturrilha no Smith Machine', muscleGroup: 'Panturrilhas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/12_-N79aAeA', description: 'Posicione a barra do Smith nos ombros e um step sob os pés. Realize a elevação de calcanhares. A máquina oferece estabilidade.' },
    { id: 'ex083', name: 'Passada com step', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/nVwijAFgc88', description: 'Suba em um step com uma perna e eleve o joelho da outra perna. Desça de forma controlada. Alterne as pernas.' },
    { id: 'ex084', name: 'Passada no Smith', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/6ttNOxwfZig', description: 'Execute o movimento de avanço (lunge) com a barra guiada da máquina Smith para maior estabilidade.' },
    { id: 'ex085', name: 'Passada para trás', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/UyCc21MAfgs', description: 'Em vez de dar um passo à frente, dê um passo para trás e agache. Muitas pessoas sentem mais estabilidade nesta variação.' },
    { id: 'ex086', name: 'Peck deck (máquina)', muscleGroup: 'Peito', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/mHUXquPiky0', description: 'Sente-se na máquina e posicione os antebraços nos apoios. Junte os braços à sua frente, contraindo o peitoral.' },
    { id: 'ex142', name: 'Polichinelo cruzado', muscleGroup: 'Cardio/Condicionamento', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/5Luo1EtMooc', description: 'Realize um polichinelo normal, mas ao juntar os membros, cruze os braços à frente do peito e as pernas.' },
    { id: 'ex087', name: 'Ponte de glúteos com elástico', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/YMEHhz1mD5Y', description: 'Deite-se de costas com os joelhos flexionados e um elástico acima deles. Eleve o quadril enquanto mantém os joelhos afastados para ativar os glúteos.' },
    { id: 'ex143', name: 'Power clean com barra', muscleGroup: 'Funcionais/Livre', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/e8TpDdMYq4Y', description: 'Um movimento olímpico. Puxe a barra do chão de forma explosiva, estendendo o quadril e encolhendo os ombros, e então entre rapidamente sob a barra, recebendo-a nos ombros em posição de agachamento frontal.' },
    { id: 'ex144', name: 'Prancha (plank)', muscleGroup: 'Core/Abdominais', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/ffHr8a6DRvU', description: 'Apoie os antebraços e as pontas dos pés no chão. Mantenha o corpo reto como uma prancha, contraindo o abdômen e os glúteos. Sustente a posição.' },
    { id: 'ex145', name: 'Prancha lateral', muscleGroup: 'Core/Abdominais', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/7wwAHCQvgcw', description: 'Apoie um antebraço no chão, de lado. Eleve o quadril, mantendo o corpo reto. Sustente a posição e depois troque de lado.' },
    { id: 'ex006', name: 'Puxada Frontal', muscleGroup: 'Costas, Bíceps', gifUrl: 'https://i.imgur.com/U0nL5bZ.gif', videoUrl: 'https://www.youtube.com/embed/QSKVgPRx310', description: 'Sentado, segure a barra com as mãos afastadas. Puxe a barra em direção ao peito, contraindo os músculos das costas.' },
    { id: 'ex088', name: 'Puxada atrás (lat pulldown atrás da nuca)', muscleGroup: 'Costas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/vQORfSteyls', description: 'Sentado na máquina, puxe a barra para baixo, em direção à parte de trás do pescoço. Requer boa mobilidade dos ombros.' },
    { id: 'ex089', name: 'Puxada com barra na barra fixa (explosiva)', muscleGroup: 'Costas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/IY2fgUydubI', description: 'Execute o movimento de barra fixa (pull-up) da forma mais rápida e explosiva que conseguir na fase de subida.' },
    { id: 'ex090', name: 'Puxada com elástico', muscleGroup: 'Costas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/5UHbf6o-9us', description: 'Prenda um elástico em um ponto alto. Puxe o elástico para baixo, simulando o movimento da puxada frontal, contraindo as costas.' },
    { id: 'ex091', name: 'Puxada com pegada aberta no cross', muscleGroup: 'Costas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/4at3qgnx7FQ', description: 'Em um crossover com polias altas, segure os puxadores opostos (mão direita no puxador esquerdo e vice-versa). Puxe para baixo e para fora, contraindo as costas.' },
    { id: 'ex092', name: 'Puxada na frente (pulldown)', muscleGroup: 'Costas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/faBzkqlJzXU', description: 'Sentado na máquina, segure a barra com uma pegada aberta e puxe-a para baixo, em direção à parte superior do peito. Mantenha o tronco estável.' },
    { id: 'ex093', name: 'Puxada neutra na polia', muscleGroup: 'Costas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/B3aDSlCUEAM', description: 'Use um puxador com pegada neutra (palmas das mãos viradas uma para a outra) na máquina de puxada. Puxe o puxador em direção ao peito.' },
    { id: 'ex094', name: 'Remada baixa (puley)', muscleGroup: 'Costas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/W2hMGF2nUe0', description: 'Sentado na máquina com os pés apoiados, segure o puxador. Puxe-o em direção ao abdômen, mantendo as costas retas e contraindo os músculos dorsais.' },
    { id: 'ex095', name: 'Remada baixa com barra T', muscleGroup: 'Costas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/yNKy98jhxts', description: 'Com uma barra T, incline o tronco para a frente e puxe a barra em direção ao peito. Mantenha as costas retas.' },
    { id: 'ex096', name: 'Remada cavalinho (T-bar row)', muscleGroup: 'Costas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/oerQkezgmjk', description: 'Posicione-se sobre a barra no aparelho de remada cavalinho. Puxe a barra em direção ao peito, contraindo as costas.' },
    { id: 'ex097', name: 'Remada cavalinho unilateral', muscleGroup: 'Costas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/sWGiaOp5eZo', description: 'Execute a remada cavalinho usando apenas um braço de cada vez para focar em cada lado das costas individualmente.' },
    { id: 'ex009', name: 'Remada Curvada', muscleGroup: 'Costas', gifUrl: 'https://i.imgur.com/y3g3j3G.gif', videoUrl: 'https://www.youtube.com/embed/SbuXAFpDUkI', description: 'Incline o tronco para a frente, mantendo as costas retas. Puxe a barra em direção ao abdômen.' },
    { id: 'ex098', name: 'Remada curvada com halteres', muscleGroup: 'Costas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/NDv0QaKNKEo', description: 'Incline o tronco para a frente, segurando um halter em cada mão. Puxe os halteres para cima, em direção às costelas, mantendo os cotovelos próximos ao corpo.' },
    { id: 'ex099', name: 'Remada em banco inclinado', muscleGroup: 'Costas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/rRx2AIwaRFY', description: 'Deite-se de bruços em um banco inclinado. Segure halteres e puxe-os para cima, contraindo as costas. O banco ajuda a isolar o movimento.' },
    { id: 'ex100', name: 'Remada invertida (australiana)', muscleGroup: 'Costas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/_roWXwr8nrY', description: 'Posicione-se sob uma barra baixa (no Smith, por exemplo). Segure a barra e puxe o peito em direção a ela, mantendo o corpo reto.' },
    { id: 'ex146', name: 'Remada invertida com TRX', muscleGroup: 'Costas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/6kEOewmXj_g', description: 'Segure as alças do TRX e incline o corpo para trás. Puxe o corpo em direção às alças, mantendo-o reto. Quanto mais na horizontal você estiver, mais difícil.' },
    { id: 'ex147', name: 'Remada na máquina Hammer', muscleGroup: 'Costas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/gBxljuPwkzQ', description: 'Sente-se na máquina Hammer, com o peito apoiado. Puxe os pegadores para trás, contraindo as costas. Pode ser feito de forma unilateral ou bilateral.' },
    { id: 'ex148', name: 'Remada unilateral com halteres', muscleGroup: 'Costas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/RmowAgP6vsk', description: 'Apoie um joelho e uma mão em um banco. Segure um halter com a outra mão e puxe-o para cima, ao lado do tronco. Mantenha as costas retas.' },
    { id: 'ex149', name: 'Remo ergômetro (remada indoor)', muscleGroup: 'Cardio/Condicionamento', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/yaxveBJGoy8', description: 'Sente-se na máquina de remo. Empurre com as pernas, depois incline o tronco para trás e, por fim, puxe o pegador em direção ao peito. Retorne na ordem inversa.' },
    { id: 'ex150', name: 'Rosca 21 (três amplitudes)', muscleGroup: 'Bíceps', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/nC-US9vOHz8', description: 'Com uma barra, faça 7 repetições da metade inferior do movimento, 7 da metade superior e 7 completas, totalizando 21 repetições.' },
    { id: 'ex151', name: 'Rosca alternada', muscleGroup: 'Bíceps', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/a28SbBN_14k', description: 'Segurando um halter em cada mão, flexione um cotovelo de cada vez, trazendo o peso em direção ao ombro. Gire o punho durante o movimento (supinação).' },
    { id: 'ex152', name: 'Rosca alternada martelo no banco inclinado', muscleGroup: 'Bíceps', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/rBLbG-9bSyY', description: 'Sentado em um banco inclinado, execute a rosca martelo de forma alternada. A inclinação aumenta o alongamento do bíceps.' },
    { id: 'ex153', name: 'Rosca com anilha', muscleGroup: 'Bíceps', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/X5jfbHojEEI', description: 'Segure uma anilha com ambas as mãos e realize o movimento de rosca, flexionando os cotovelos.' },
    { id: 'ex154', name: 'Rosca com barra W', muscleGroup: 'Bíceps', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/iA4RH6zDin0', description: 'Use a barra W para uma pegada mais confortável para os punhos ao realizar a rosca direta.' },
    { id: 'ex155', name: 'Rosca com elástico', muscleGroup: 'Bíceps', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/QXOm_PcM6MQ', description: 'Pise no meio de um elástico e segure as pontas. Realize o movimento de rosca contra a resistência crescente do elástico.' },
    { id: 'ex156', name: 'Rosca com kettlebell', muscleGroup: 'Bíceps', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/K9MF4zJtYLs', description: 'Segure o kettlebell pela alça e realize o movimento de rosca. O centro de gravidade diferente oferece um novo estímulo.' },
    { id: 'ex157', name: 'Rosca concentrada', muscleGroup: 'Bíceps', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/heNn_ixx3sg', description: 'Sentado, apoie o cotovelo na parte interna da coxa. Flexione o cotovelo, trazendo o halter em direção ao ombro. Foca no pico do bíceps.' },
    { id: 'ex158', name: 'Rosca concentrada no cabo', muscleGroup: 'Bíceps', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/jDuE_v0s_nU', description: 'Sente-se e apoie o cotovelo na coxa, como na rosca concentrada, mas usando uma polia baixa para tensão constante.' },
    { id: 'ex004', name: 'Rosca Direta com Barra', muscleGroup: 'Bíceps', gifUrl: 'https://i.imgur.com/9xX4A2F.gif', videoUrl: 'https://www.youtube.com/embed/kdvuXL_LC_o', description: 'Em pé, segure a barra com as palmas das mãos para cima. Flexione os cotovelos, trazendo a barra em direção aos ombros.' },
    { id: 'ex159', name: 'Rosca direta com halteres', muscleGroup: 'Bíceps', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/hZrvPQz-0f8', description: 'Em pé, segure um halter em cada mão com as palmas para a frente. Flexione ambos os cotovelos simultaneamente.' },
    { id: 'ex160', name: 'Rosca inclinada com halteres', muscleGroup: 'Bíceps', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/YZAnUESiH4Q', description: 'Sente-se em um banco inclinado. Deixe os braços penderem ao lado do corpo e realize a rosca. A posição aumenta o alongamento e a amplitude.' },
    { id: 'ex161', name: 'Rosca invertida', muscleGroup: 'Bíceps', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/i9O7gyLCzhg', description: 'Segure uma barra ou halteres com as palmas das mãos viradas para baixo (pegada pronada). Realize o movimento de rosca. Trabalha o braquial e os antebraços.' },
    { id: 'ex162', name: 'Rosca martelo', muscleGroup: 'Bíceps', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/8PN6YfFC6Q4', description: 'Segure os halteres com uma pegada neutra (palmas viradas uma para a outra). Flexione os cotovelos. Trabalha o músculo braquial, dando mais volume ao braço.' },
    { id: 'ex163', name: 'Rosca na máquina scott', muscleGroup: 'Bíceps', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/BaLyD_0Qi9Y', description: 'Posicione os braços no apoio da máquina Scott e segure os pegadores. Flexione os cotovelos, puxando o peso.' },
    { id: 'ex164', name: 'Rosca na polia baixa', muscleGroup: 'Bíceps', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/OLDilBZxtmg', description: 'Em frente a uma polia baixa, segure uma barra ou puxador. Realize o movimento de rosca. A polia oferece tensão constante durante todo o movimento.' },
    { id: 'ex165', name: 'Rosca no cabo sentado', muscleGroup: 'Bíceps', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/XQ3ixkKq2xk', description: 'Sentado no chão ou em um banco, em frente a uma polia baixa, realize o movimento de rosca para maior estabilidade.' },
    { id: 'ex166', name: 'Rosca Scott (máquina ou banco)', muscleGroup: 'Bíceps', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/bqrqV_wKF-8', description: 'Apoie a parte de trás dos braços em um banco Scott. Segure uma barra ou halteres e flexione os cotovelos. Isola o bíceps.' },
    { id: 'ex167', name: 'Rosca simultânea com giro de punho', muscleGroup: 'Bíceps', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/KCkM32Jv974', description: 'Comece com uma pegada neutra (martelo) e, ao subir os halteres, gire os punhos para que as palmas terminem viradas para você (pegada supinada).' },
    { id: 'ex168', name: 'Rosca Zottman', muscleGroup: 'Bíceps', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/RJkMUA', description: 'Suba o peso com a palma da mão para cima (supinada) e desça com a palma da mão para baixo (pronada). Trabalha diferentes músculos na subida e na descida.' },
    { id: 'ex169', name: 'Russian twist com peso', muscleGroup: 'Core/Abdominais', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/8hnozF9z1_U', description: 'Sentado no chão, incline o tronco para trás e eleve os pés. Segure um peso e rotacione o tronco de um lado para o outro.' },
    { id: 'ex170', name: 'Saltos pliométricos na caixa', muscleGroup: 'Cardio/Condicionamento', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/90pkIZPBGG8', description: 'Em frente a uma caixa, agache e salte sobre ela, aterrissando suavemente. Desça da caixa e repita. Desenvolve potência e explosão.' },
    { id: 'ex171', name: 'Sandbag squat', muscleGroup: 'Funcionais/Livre', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/56rkerlZ-Zw', description: 'Segure um saco de areia (sandbag) nos ombros ou na frente do corpo e realize um agachamento. A instabilidade do peso aumenta o desafio.' },
    { id: 'ex172', name: 'Shuttle run (tiros curtos com mudança de direção)', muscleGroup: 'Cardio/Condicionamento', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/qwlMNyPFvrA', description: 'Corra em velocidade máxima entre dois pontos, tocando o chão a cada mudança de direção. Ótimo para agilidade e condicionamento anaeróbico.' },
    { id: 'ex173', name: 'Skater jump', muscleGroup: 'Funcionais/Livre', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/qM5jviFhw9U', description: 'Salte lateralmente de uma perna para a outra, como um patinador de velocidade. Mantenha o equilíbrio e a explosão no movimento.' },
    { id: 'ex174', name: 'Sled push (empurrar trenó)', muscleGroup: 'Funcionais/Livre', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/Qw8q55JR5VY', description: 'Empurre um trenó com peso por uma distância determinada. É um exercício de corpo inteiro que desenvolve força e condicionamento.' },
    { id: 'ex175', name: 'Step-up com barra', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/99pGw9UclO4', description: 'Com uma barra nos ombros, suba em um banco ou caixa com uma perna e depois desça. Alterne as pernas.' },
    { id: 'ex176', name: 'Step-up com peso', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/5qSwbBigW9s', description: 'Segurando halteres ou kettlebells, suba em um banco ou caixa com uma perna de cada vez. Mantenha o controle do movimento.' },
    { id: 'ex177', name: 'Stiff com barra', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/Vjtn6n_-sXo', description: 'Segure a barra à frente do corpo. Com os joelhos quase estendidos, desça a barra mantendo as costas retas, focando no alongamento dos isquiotibiais.' },
    { id: 'ex178', name: 'Stiff com halteres', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/sfOekGDGp6A', description: 'Execute o movimento de stiff segurando um halter em cada mão. Permite uma maior amplitude de movimento.' },
    { id: 'ex179', name: 'Stiff com kettlebell', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/krG0VFjZi64', description: 'Segure um ou dois kettlebells e realize o movimento de stiff, flexionando o quadril e mantendo as costas retas.' },
    { id: 'ex180', name: 'Stiff unilateral com halteres', muscleGroup: 'Pernas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/2hDgeE78HZ0', description: 'Equilibrando-se em uma perna, incline o tronco para a frente enquanto eleva a outra perna para trás. Segure halteres para aumentar a carga. Exige equilíbrio e força.' },
    { id: 'ex181', name: 'Superman no solo', muscleGroup: 'Costas', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/vDXe2eBowUg', description: 'Deite-se de bruços com os braços estendidos à frente. Eleve simultaneamente os braços, o peito e as pernas do chão, contraindo a lombar e os glúteos.' },
    { id: 'ex182', name: 'Supino com barra guiada (Smith)', muscleGroup: 'Peito', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/I6wdHlJjPHA', description: 'Execute o supino na máquina Smith. O movimento guiado oferece segurança e permite focar na contração do peitoral.' },
    { id: 'ex183', name: 'Supino com pegada fechada', muscleGroup: 'Peito', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/FLHlhZ3gEvo', description: 'Realize o supino com uma pegada mais estreita que a largura dos ombros. Este movimento foca mais nos tríceps e na parte interna do peito.' },
    { id: 'ex184', name: 'Supino declinado', muscleGroup: 'Peito', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/ACpq_lrkO58', description: 'Deite-se em um banco declinado. Execute o supino para focar na porção inferior do músculo peitoral.' },
    { id: 'ex185', name: 'Supino inclinado com barra', muscleGroup: 'Peito', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/wlLcApOyK2w', description: 'Deite-se em um banco inclinado. Execute o supino com barra para focar na porção superior do músculo peitoral.' },
    { id: 'ex186', name: 'Supino inclinado com halteres', muscleGroup: 'Peito', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/SZh-pWZ3pN0', description: 'Deite-se em um banco inclinado e execute o supino com halteres. Permite maior amplitude de movimento que a barra.' },
    { id: 'ex001', name: 'Supino Reto com Barra', muscleGroup: 'Peitoral, Ombros, Tríceps', gifUrl: 'https://i.imgur.com/t0k2x3Q.gif', videoUrl: 'https://www.youtube.com/embed/MPM1bqU7b44', description: 'Deite-se em um banco reto, segure a barra com as mãos um pouco mais afastadas que a largura dos ombros. Abaixe a barra até o peito e empurre para cima até a posição inicial.' },
    { id: 'ex187', name: 'Supino reto com halteres', muscleGroup: 'Peito', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/mvu9lOQ1sHg', description: 'Deite-se em um banco reto. Segure um halter em cada mão e execute o movimento de supino. Permite maior amplitude e trabalho dos músculos estabilizadores.' },
    { id: 'ex188', name: 'Thruster (agachamento + desenvolvimento)', muscleGroup: 'Funcionais/Livre', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/4SRdx6pnvvI', description: 'Segure uma barra ou halteres na posição de agachamento frontal. Agache e, ao se levantar, use o impulso para empurrar o peso acima da cabeça em um movimento fluido.' },
    { id: 'ex189', name: 'Tríceps banco (mergulho/dip com banco)', muscleGroup: 'Tríceps', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/S1fgvJZu4Hc', description: 'Apoie as mãos em um banco atrás de você e os pés no chão. Flexione os cotovelos para descer o corpo e estenda-os para subir.' },
    { id: 'ex190', name: 'Tríceps banco com pernas elevadas', muscleGroup: 'Tríceps', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/PLxCgq4Rrfw', description: 'Execute o tríceps banco, mas com os pés apoiados em outro banco à sua frente. Isso aumenta a dificuldade do exercício.' },
    { id: 'ex192', name: 'Tríceps com bola suíça', muscleGroup: 'Tríceps', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/aoEHM5yLMRE', description: 'Apoie as mãos em uma bola suíça e realize uma flexão com pegada fechada. A instabilidade da bola aumenta o desafio.' },
    { id: 'ex193', name: 'Tríceps com elástico (em pé)', muscleGroup: 'Tríceps', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/qAb8AG9A0gI', description: 'Prenda um elástico em um ponto alto. Segure a outra ponta e puxe para baixo, estendendo o cotovelo, como no tríceps pulley.' },
    { id: 'ex194', name: 'Tríceps com kettlebell', muscleGroup: 'Tríceps', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/0Gd3e8GpEwU', description: 'Segure um kettlebell pela alça acima da cabeça. Flexione os cotovelos para descer o peso por trás da cabeça e estenda para subir.' },
    { id: 'ex195', name: 'Tríceps corda na polia', muscleGroup: 'Tríceps', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/rhC2dgBnRRQ', description: 'Na polia alta, use o puxador de corda. Puxe para baixo, estendendo os cotovelos, e afaste as mãos no final do movimento para máxima contração.' },
    { id: 'ex196', name: 'Tríceps francês com halter', muscleGroup: 'Tríceps', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/TkGyrH6EQK4', description: 'Deitado, segure um halter com ambas as mãos acima da cabeça. Flexione os cotovelos, descendo o peso, e estenda novamente.' },
    { id: 'ex197', name: 'Tríceps francês sentado com barra', muscleGroup: 'Tríceps', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/SI-THv1gZZQ', description: 'Sentado, segure uma barra e estenda os braços acima da cabeça. Desça a barra por trás da cabeça flexionando os cotovelos.' },
    { id: 'ex198', name: 'Tríceps invertido na barra (pegada supinada)', muscleGroup: 'Tríceps', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/tGbricpU-vg', description: 'Na polia alta, use uma barra com pegada supinada (palmas para cima). Puxe a barra para baixo, estendendo os cotovelos.' },
    { id: 'ex199', name: 'Tríceps mergulho com peso', muscleGroup: 'Tríceps', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/Rq6UhRjrSN8', description: 'Execute o mergulho em barras paralelas com peso adicional preso a um cinto para aumentar a resistência.' },
    { id: 'ex200', name: 'Tríceps na máquina', muscleGroup: 'Tríceps', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/jmznZ45g8jc', description: 'Sente-se na máquina de tríceps e empurre os apoios para baixo, estendendo os cotovelos contra a resistência.' },
    { id: 'ex201', name: 'Tríceps na polia com barra V', muscleGroup: 'Tríceps', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/jlSfVZtug7Y', description: 'Use o puxador em formato de "V" na polia alta para realizar a extensão de tríceps. A pegada pode ser mais confortável para alguns.' },
    { id: 'ex202', name: 'Tríceps paralela (barra paralela)', muscleGroup: 'Tríceps', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/ToGixYQlQfM', description: 'Em barras paralelas, mantenha o tronco o mais reto possível e desça flexionando os cotovelos. Empurre para cima para retornar. Foco intenso nos tríceps.' },
    { id: 'ex005', name: 'Tríceps Pulley', muscleGroup: 'Tríceps', gifUrl: 'https://i.imgur.com/vDAy3b1.gif', videoUrl: 'https://www.youtube.com/embed/KJ0ALOYJCcw', description: 'Em pé, de frente para a polia alta, segure a barra com as mãos. Estenda os cotovelos para baixo, mantendo os braços parados.' },
    { id: 'ex203', name: 'Tríceps testa com barra (skull crusher)', muscleGroup: 'Tríceps', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/7pqjhaGyEPU', description: 'Deitado, segure uma barra acima do peito. Flexione os cotovelos, descendo a barra em direção à testa, e estenda os braços para voltar.' },
    { id: 'ex204', name: 'Tríceps testa com halteres', muscleGroup: 'Tríceps', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/3exQOuxtNoo', description: 'Execute o mesmo movimento do tríceps testa, mas com um halter em cada mão. Permite um movimento mais natural para os punhos.' },
    { id: 'ex205', name: 'Tríceps unilateral em banco inclinado', muscleGroup: 'Tríceps', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/t_MJocNBKso', description: 'Deite-se de lado em um banco inclinado. Com o braço de cima, segure um halter e estenda o cotovelo para cima.' },
    { id: 'ex206', name: 'Tríceps unilateral na polia', muscleGroup: 'Tríceps', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/uyMrlI2tgo0', description: 'Na polia alta, segure o puxador com uma mão e execute a extensão do cotovelo. Foca em um braço de cada vez.' },
    { id: 'ex207', name: 'Turkish get-up', muscleGroup: 'Funcionais/Livre', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/13OVvvR7byo', description: 'Um movimento complexo que envolve levantar-se do chão para a posição em pé enquanto se mantém um peso (geralmente um kettlebell) estendido acima da cabeça.' },
    { id: 'ex208', name: 'Wall ball (bola no alvo)', muscleGroup: 'Funcionais/Livre', gifUrl: '', videoUrl: 'https://www.youtube.com/embed/dbUvzV_GY1M', description: 'Segurando uma bola medicinal, agache e, ao se levantar, lance a bola em um alvo na parede. Pegue a bola no retorno e inicie a próxima repetição.' },
].sort((a, b) => a.name.localeCompare(b.name));


// --- CONFIGURAÇÃO DO FIREBASE ---
// Configuração do Firebase fornecida pelo usuário.
const firebaseConfig = {
    apiKey: "AIzaSyA2qMP43282spWQHn054Chx_udKlvXDQOs",
    authDomain: "gympro-trainer.firebaseapp.com",
    projectId: "gympro-trainer",
    storageBucket: "gympro-trainer.firebasestorage.app",
    messagingSenderId: "264747309363",
    appId: "1:264747309363:web:154fd795f1a8af62ba0646",
    measurementId: "G-P0XFYYR9FC"
};
const appId = 'gympro-trainer-app'; // Usando um ID padrão para o app local

const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);
const storage = getStorage(app);

// --- FUNÇÕES UTILITÁRIAS ---
const generateInviteCode = () => `GYM-${Math.floor(1000 + Math.random() * 9000)}`;

const calculateBMI = (weight, height) => {
    if (!weight || !height) return 0;
    return (weight / ((height / 100) ** 2)).toFixed(1);
};

const calculateBodyFat = (gender, height, neck, waist, hips) => {
    if (!height || !neck || !waist || (gender === 'female' && !hips)) return 0;
    try {
        if (gender === 'male') {
            return (495 / (1.0324 - 0.19077 * Math.log10(parseFloat(waist) - parseFloat(neck)) + 0.15456 * Math.log10(parseFloat(height))) - 450).toFixed(1);
        } else { // female
            return (495 / (1.29579 - 0.35004 * Math.log10(parseFloat(waist) + parseFloat(hips) - parseFloat(neck)) + 0.22100 * Math.log10(parseFloat(height))) - 450).toFixed(1);
        }
    } catch (error) {
        console.error("Error calculating body fat:", error);
        return 0;
    }
};


// --- COMPONENTES DE UI (Preto e Laranja) ---
const Card = ({ children, className = '' }) => <div className={`bg-gray-900 shadow-lg rounded-xl p-4 md:p-6 ${className}`}>{children}</div>;
const Button = ({ children, onClick, className = '', variant = 'primary', ...props }) => {
    const baseClasses = 'px-4 py-2 rounded-lg font-semibold shadow-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-black transition-all duration-200 flex items-center justify-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed';
    const variants = {
        primary: 'bg-orange-600 hover:bg-orange-700 text-white focus:ring-orange-500',
        secondary: 'bg-gray-800 hover:bg-gray-700 text-gray-200 focus:ring-gray-600',
        danger: 'bg-red-600 hover:bg-red-700 text-white focus:ring-red-500',
    };
    return <button onClick={onClick} className={`${baseClasses} ${variants[variant]} ${className}`} {...props}>{children}</button>;
};
const Modal = ({ isOpen, onClose, title, children, zIndex = "z-50" }) => {
    if (!isOpen) return null;
    return (
        <div className={`fixed inset-0 bg-black bg-opacity-80 ${zIndex} flex justify-center items-center p-4`}>
            <div className="bg-black border border-gray-800 rounded-xl shadow-2xl w-full max-w-2xl max-h-[90vh] flex flex-col">
                <div className="flex justify-between items-center p-4 border-b border-gray-800"><h2 className="text-xl font-bold text-white">{title}</h2><button onClick={onClose} className="text-gray-400 hover:text-white"><X size={24} /></button></div>
                <div className="p-6 overflow-y-auto">{children}</div>
            </div>
        </div>
    );
};
const Input = React.forwardRef(({ label, ...props }, ref) => (
    <div>
        <label className="block text-sm font-medium text-gray-300 mb-1">{label}</label>
        <input ref={ref} {...props} className="w-full bg-gray-800 border border-gray-700 text-white rounded-lg px-3 py-2 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 outline-none" />
    </div>
));
const Select = ({ label, children, ...props }) => (
    <div>
        <label className="block text-sm font-medium text-gray-300 mb-1">{label}</label>
        <select {...props} className="w-full bg-gray-800 border border-gray-700 text-white rounded-lg px-3 py-2 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 outline-none">
            {children}
        </select>
    </div>
);
const TextArea = React.forwardRef(({ label, ...props }, ref) => (
    <div>
        <label className="block text-sm font-medium text-gray-300 mb-1">{label}</label>
        <textarea ref={ref} {...props} className="w-full bg-gray-800 border border-gray-700 text-white rounded-lg px-3 py-2 focus:ring-2 focus:ring-orange-500 focus:border-orange-500 outline-none" />
    </div>
));


// --- COMPONENTES DE FORMULÁRIO ---

const StudentForm = ({ onSave, onCancel, student }) => {
    const [formData, setFormData] = useState({
        name: student?.name || '',
        gender: student?.gender || 'male',
        age: student?.age || '',
        weight: student?.weight || '',
        height: student?.height || '',
        neck: student?.neck || '',
        chest: student?.chest || '',
        waist: student?.waist || '',
        hips: student?.hips || '',
    });

    const handleChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({ ...prev, [name]: value }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        onSave(formData);
    };

    return (
        <form onSubmit={handleSubmit} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <Input label="Nome do Aluno" name="name" value={formData.name} onChange={handleChange} required />
                <Select label="Gênero" name="gender" value={formData.gender} onChange={handleChange}>
                    <option value="male">Masculino</option>
                    <option value="female">Feminino</option>
                </Select>
            </div>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <Input label="Idade" name="age" type="number" value={formData.age} onChange={handleChange} />
                <Input label="Peso (kg)" name="weight" type="number" step="0.1" value={formData.weight} onChange={handleChange} />
                <Input label="Altura (cm)" name="height" type="number" value={formData.height} onChange={handleChange} />
                <Input label="Pescoço (cm)" name="neck" type="number" step="0.1" value={formData.neck} onChange={handleChange} />
                <Input label="Peitoral (cm)" name="chest" type="number" step="0.1" value={formData.chest} onChange={handleChange} />
                <Input label="Cintura (cm)" name="waist" type="number" step="0.1" value={formData.waist} onChange={handleChange} />
                <Input label="Quadril (cm)" name="hips" type="number" step="0.1" value={formData.hips} onChange={handleChange} />
            </div>
            <div className="flex justify-end gap-4 pt-4 border-t border-gray-800 mt-4">
                <Button type="button" variant="secondary" onClick={onCancel}>Cancelar</Button>
                <Button type="submit">{student ? 'Salvar Alterações' : 'Criar Perfil'}</Button>
            </div>
        </form>
    );
};

// --- COMPONENTES DE VISUALIZAÇÃO E NOVOS MODAIS ---

const ExerciseDetailModal = ({ isOpen, onClose, exercise, zIndex }) => {
    if (!isOpen) return null;

    return (
        <Modal isOpen={isOpen} onClose={onClose} title={exercise.name} zIndex={zIndex}>
            <div className="space-y-4">
                {exercise.videoUrl ? (
                    <div className="aspect-video">
                        <iframe
                            width="100%"
                            height="100%"
                            src={exercise.videoUrl}
                            title={`YouTube video player: ${exercise.name}`}
                            frameBorder="0"
                            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                            allowFullScreen
                            sandbox="allow-scripts allow-same-origin allow-forms allow-popups allow-presentation"
                            className="rounded-lg"
                        ></iframe>
                    </div>
                ) : (
                    <div className="aspect-video bg-gray-900 flex items-center justify-center rounded-lg">
                        <p className="text-gray-400">Vídeo não disponível</p>
                    </div>
                )}
                <div>
                    <h3 className="text-lg font-bold text-orange-400">Grupo Muscular</h3>
                    <p>{exercise.muscleGroup}</p>
                </div>
                {exercise.description && (
                       <div>
                            <h3 className="text-lg font-bold text-orange-400">Descrição</h3>
                            <p>{exercise.description}</p>
                        </div>
                )}
            </div>
        </Modal>
    );
};


const DailyUpdateModal = ({ isOpen, onClose, date, student, onStudentUpdate }) => {
    const [status, setStatus] = useState('');
    const [measurements, setMeasurements] = useState({ weight: '', neck: '', chest: '', waist: '', hips: '' });
    const [previousMeasurements, setPreviousMeasurements] = useState(null);
    const [isLoading, setIsLoading] = useState(true);
    const studentId = student.id;
    
    useEffect(() => {
        if (!isOpen) return;

        const fetchData = async () => {
            setIsLoading(true);
            const path = `/artifacts/${appId}/public/data/students/${studentId}/measurementsHistory`;
            const measurementRef = doc(db, path, date);
            const measurementSnap = await getDoc(measurementRef);
            if (measurementSnap.exists()) {
                const data = measurementSnap.data();
                setMeasurements({
                    weight: data.weight || '',
                    neck: data.neck || '',
                    chest: data.chest || '',
                    waist: data.waist || '',
                    hips: data.hips || '',
                });
                setStatus(data.status || '');
            } else {
                 setMeasurements({ weight: '', neck: '', chest: '', waist: '', hips: '' });
                 setStatus('');
            }
            
            const q = query(
                collection(db, path),
                where('date', '<', date),
                orderBy('date', 'desc'),
                limit(1)
            );
            const prevSnap = await getDocs(q);
            if (!prevSnap.empty) {
                setPreviousMeasurements(prevSnap.docs[0].data());
            } else {
                setPreviousMeasurements(student); 
            }

            setIsLoading(false);
        };

        fetchData();
    }, [isOpen, date, studentId, student]);

    const handleMeasurementChange = (e) => {
        const { name, value } = e.target;
        setMeasurements(prev => ({ ...prev, [name]: value }));
    };

    const handleStatusChange = (newStatus) => {
        setStatus(current => current === newStatus ? '' : newStatus);
    }

    const handleSave = async () => {
        const hasMeasurements = Object.values(measurements).some(val => val && val !== '');
        const dataToSave = {
            date,
            status,
            ...measurements
        };

        const measurementRef = doc(db, `/artifacts/${appId}/public/data/students/${studentId}/measurementsHistory`, date);
        await setDoc(measurementRef, dataToSave, { merge: true });

        if (hasMeasurements) {
            const studentDocRef = doc(db, `/artifacts/${appId}/public/data/students`, studentId);
            const updateData = Object.fromEntries(Object.entries(measurements).filter(([_, v]) => v !== ''));
            await setDoc(studentDocRef, updateData, { merge: true });
            onStudentUpdate({ ...student, ...updateData });
        }
        
        onClose();
    };
    
    const renderPrevious = (field) => previousMeasurements?.[field] ? `Anterior: ${previousMeasurements[field]}` : '';

    if (!isOpen) return null;

    return (
        <Modal isOpen={isOpen} onClose={onClose} title={`Atualização para ${new Date(date + 'T00:00:00').toLocaleDateString('pt-BR')}`}>
            {isLoading ? <p>Carregando...</p> : (
                <div className="space-y-6">
                    <div>
                        <h3 className="text-lg font-semibold text-white mb-2">Frequência</h3>
                        <div className="flex gap-4">
                            <Button onClick={() => handleStatusChange('trained')} variant={status === 'trained' ? 'primary' : 'secondary'}>Treinou</Button>
                            <Button onClick={() => handleStatusChange('missed')} variant={status === 'missed' ? 'danger' : 'secondary'}>Faltou</Button>
                        </div>
                    </div>
                    <div>
                        <h3 className="text-lg font-semibold text-white mb-2">Medidas do Dia</h3>
                        <div className="grid grid-cols-2 gap-4">
                            <Input label="Peso (kg)" name="weight" type="number" step="0.1" value={measurements.weight} onChange={handleMeasurementChange} placeholder={renderPrevious('weight')} />
                            <Input label="Pescoço (cm)" name="neck" type="number" step="0.1" value={measurements.neck} onChange={handleMeasurementChange} placeholder={renderPrevious('neck')} />
                            <Input label="Peitoral (cm)" name="chest" type="number" step="0.1" value={measurements.chest} onChange={handleMeasurementChange} placeholder={renderPrevious('chest')} />
                            <Input label="Cintura (cm)" name="waist" type="number" step="0.1" value={measurements.waist} onChange={handleMeasurementChange} placeholder={renderPrevious('waist')} />
                            <Input label="Quadril (cm)" name="hips" type="number" step="0.1" value={measurements.hips} onChange={handleMeasurementChange} placeholder={renderPrevious('hips')} />
                        </div>
                    </div>
                    <div className="flex justify-end gap-4 pt-4 border-t border-gray-800">
                        <Button variant="secondary" onClick={onClose}>Cancelar</Button>
                        <Button onClick={handleSave}>Salvar Atualização</Button>
                    </div>
                </div>
            )}
        </Modal>
    );
};


const BiometricsChart = ({ history, student }) => {
    const chartData = useMemo(() => {
        return history.filter(log => log.weight && student.height).map(log => ({
            date: new Date(log.date + 'T00:00:00').toLocaleDateString('pt-BR'),
            Peso: parseFloat(log.weight),
            IMC: parseFloat(calculateBMI(log.weight, student.height)),
            'Gordura %': parseFloat(calculateBodyFat(student.gender, student.height, log.neck, log.waist, log.hips)),
        }));
    }, [history, student]);

    if (chartData.length < 2) return <div className="text-center text-gray-400 py-8">Registre pelo menos duas medições com peso e altura para gerar o gráfico.</div>;

    return (
        <ResponsiveContainer width="100%" height={400}>
            <LineChart data={chartData}>
                <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
                <XAxis dataKey="date" stroke="#A0AEC0" />
                <YAxis yAxisId="left" stroke="#f97316" />
                <YAxis yAxisId="right" orientation="right" stroke="#e5e7eb" />
                <Tooltip contentStyle={{ backgroundColor: '#111827', border: '1px solid #374151', color: '#E2E8F0' }} />
                <Legend />
                <Line yAxisId="left" type="monotone" dataKey="Peso" stroke="#f97316" strokeWidth={2} />
                <Line yAxisId="right" type="monotone" dataKey="IMC" stroke="#e5e7eb" />
                <Line yAxisId="right" type="monotone" dataKey="Gordura %" stroke="#ffc658" />
            </LineChart>
        </ResponsiveContainer>
    );
};

const AttendanceCalendar = ({ measurements, onDateClick }) => {
    const [currentDate, setCurrentDate] = useState(new Date());

    const startOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth(), 1);
    const endOfMonth = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, 0);
    const startDay = startOfMonth.getDay();
    const daysInMonth = endOfMonth.getDate();

    const days = Array.from({ length: startDay }, (_, i) => <div key={`empty-${i}`} className="border border-gray-800"></div>);

    for (let day = 1; day <= daysInMonth; day++) {
        const date = new Date(currentDate.getFullYear(), currentDate.getMonth(), day);
        const dateString = date.toISOString().split('T')[0];
        const dayData = measurements.find(m => m.id === dateString);
        
        const isToday = new Date().toDateString() === date.toDateString();
        const hasMeasurements = dayData && (dayData.weight || dayData.neck || dayData.chest || dayData.waist || dayData.hips);

        let statusClass = '';
        if (dayData?.status === 'trained') statusClass = 'bg-green-500/50 border-green-400';
        if (dayData?.status === 'missed') statusClass = 'bg-red-500/50 border-red-400';

        days.push(
            <div key={day} onClick={() => onDateClick(dateString)} className={`relative p-2 border border-gray-800 text-center cursor-pointer hover:bg-gray-800 ${statusClass} ${isToday ? 'ring-2 ring-orange-500' : ''}`}>
                <span className="font-semibold">{day}</span>
                {hasMeasurements && <div className="absolute bottom-1 right-1 w-2 h-2 bg-orange-400 rounded-full"></div>}
            </div>
        );
    }
    
    const changeMonth = (offset) => {
        setCurrentDate(prev => new Date(prev.getFullYear(), prev.getMonth() + offset, 1));
    };

    return (
        <Card>
            <div className="flex justify-between items-center mb-4">
                <Button onClick={() => changeMonth(-1)} variant="secondary" className="p-2"><ChevronLeft size={20} /></Button>
                <h3 className="text-xl font-bold">{currentDate.toLocaleString('pt-BR', { month: 'long', year: 'numeric' })}</h3>
                <Button onClick={() => changeMonth(1)} variant="secondary" className="p-2"><ChevronRight size={20} /></Button>
            </div>
            <div className="grid grid-cols-7 text-xs text-center text-gray-400 mb-2">
                <span>Dom</span><span>Seg</span><span>Ter</span><span>Qua</span><span>Qui</span><span>Sex</span><span>Sáb</span>
            </div>
            <div className="grid grid-cols-7 gap-1">
                {days}
            </div>
            <div className="flex justify-center flex-wrap gap-4 mt-4 text-sm">
                <div className="flex items-center gap-2"><div className="w-4 h-4 bg-green-500/50 rounded"></div><span>Treinou</span></div>
                <div className="flex items-center gap-2"><div className="w-4 h-4 bg-red-500/50 rounded"></div><span>Faltou</span></div>
                <div className="flex items-center gap-2"><div className="w-2 h-2 bg-orange-400 rounded-full"></div><span>Medidas Registradas</span></div>
            </div>
        </Card>
    );
};

const AssessmentReport = ({ history, student }) => {
    const [aiAnalysis, setAiAnalysis] = useState('');
    const [isGenerating, setIsGenerating] = useState(false);
    const [error, setError] = useState('');

    const handleGenerateAnalysis = async () => {
        setIsGenerating(true);
        setError('');
        setAiAnalysis('');

        const prompt = `
            Analise o progresso deste aluno de academia com base no seguinte histórico de medições.
            O aluno é do sexo ${student.gender === 'male' ? 'masculino' : 'feminino'} e tem ${student.height} cm de altura.
            
            Histórico de Medidas (data, peso, % de gordura, IMC):
            ${history.map(h => ` - ${new Date(h.date + 'T00:00:00').toLocaleDateString('pt-BR')}: ${h.weight || 'N/A'} kg, ${calculateBodyFat(student.gender, student.height, h.neck, h.waist, h.hips) || 'N/A'}% gordura, ${calculateBMI(h.weight, student.height) || 'N/A'} IMC`).join('\n')}

            Forneça uma análise concisa e objetiva sobre a evolução do aluno, destacando tendências positivas ou negativas.
            Finalize com 2 ou 3 recomendações práticas e acionáveis para o personal trainer.
            Responda em português do Brasil.
        `;
        
        try {
            let chatHistory = [{ role: "user", parts: [{ text: prompt }] }];
            const payload = { contents: chatHistory };
            const apiKey = "";
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;
            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                throw new Error(`API Error: ${response.statusText}`);
            }

            const result = await response.json();
            
            if (result.candidates && result.candidates.length > 0 &&
                result.candidates[0].content && result.candidates[0].content.parts &&
                result.candidates[0].content.parts.length > 0) {
                const text = result.candidates[0].content.parts[0].text;
                setAiAnalysis(text);
            } else {
                throw new Error("Resposta da API inválida ou vazia.");
            }
        } catch (e) {
            console.error("Erro ao gerar análise:", e);
            setError("Não foi possível gerar a análise. Tente novamente.");
        } finally {
            setIsGenerating(false);
        }
    };

    const validHistory = history.filter(h => h.weight);
    if (validHistory.length < 2) {
        return <Card><p className="text-gray-400">Avaliação disponível após 2 registros de medidas.</p></Card>;
    }
    const lastTwo = validHistory.slice(-2);
    const [prev, current] = lastTwo;
    
    const weightDiff = (current.weight - prev.weight).toFixed(1);
    
    const renderDiff = (diff, unit) => {
        const value = parseFloat(diff);
        if (value > 0) return <span className="text-red-400">↑ {value}{unit}</span>;
        if (value < 0) return <span className="text-green-400">↓ {Math.abs(value)}{unit}</span>;
        return <span className="text-gray-400">--</span>;
    };

    return (
        <Card>
            <h3 className="text-xl font-bold text-white mb-4">Avaliação de Progresso</h3>
            <div className="space-y-2 mb-6">
                <p className="text-gray-400 mb-4">Comparativo entre {new Date(prev.date + 'T00:00:00').toLocaleDateString('pt-BR')} e {new Date(current.date + 'T00:00:00').toLocaleDateString('pt-BR')}</p>
                <div className="flex justify-between"><span>Peso:</span> <span>{renderDiff(weightDiff, 'kg')}</span></div>
            </div>
            
            <div className="border-t border-gray-800 pt-6">
                <Button onClick={handleGenerateAnalysis} disabled={isGenerating}>
                    <Sparkles size={18} className="text-yellow-300" />
                    {isGenerating ? 'Analisando...' : '✨ Obter Análise da IA'}
                </Button>
                {error && <p className="text-red-500 text-sm mt-4">{error}</p>}
                {aiAnalysis && (
                    <div className="mt-4 p-4 bg-black rounded-lg">
                        <h4 className="font-bold text-orange-400 mb-2">Análise Inteligente</h4>
                        <p className="text-gray-300 whitespace-pre-wrap">{aiAnalysis}</p>
                    </div>
                )}
            </div>
        </Card>
    );
};

const ConfirmationModal = ({ isOpen, onClose, onConfirm, title, message }) => {
    if (!isOpen) return null;
    return (
        <Modal isOpen={isOpen} onClose={onClose} title={title}>
            <div className="space-y-6">
                <p className="text-gray-300">{message}</p>
                <div className="flex justify-end gap-4">
                    <Button variant="secondary" onClick={onClose}>Cancelar</Button>
                    <Button variant="danger" onClick={onConfirm}>Confirmar</Button>
                </div>
            </div>
        </Modal>
    );
};


// --- COMPONENTES PRINCIPAIS ---

const StudentProfile = ({ student, onBack, onStudentUpdate, mode, currentUserId }) => {
    const [view, setView] = useState('workouts');
    const [workouts, setWorkouts] = useState([]);
    const [measurements, setMeasurements] = useState([]);
    const [observations, setObservations] = useState('');
    const [isObservationsDirty, setIsObservationsDirty] = useState(false);
    
    const [isWorkoutFormOpen, setIsWorkoutFormOpen] = useState(false);
    const [isGeminiModalOpen, setIsGeminiModalOpen] = useState(false);
    const [isPerformanceFormOpen, setIsPerformanceFormOpen] = useState(false);
    const [isEditFormOpen, setIsEditFormOpen] = useState(false);
    const [dailyUpdateDate, setDailyUpdateDate] = useState(null);
    const [exerciseDetail, setExerciseDetail] = useState(null);
    const [workoutToDelete, setWorkoutToDelete] = useState(null);

    const [selectedWorkout, setSelectedWorkout] = useState(null);
    const [editingWorkout, setEditingWorkout] = useState(null);
    
    const studentId = student.id;

    useEffect(() => {
        setObservations(student.observations || '');
        setIsObservationsDirty(false);
    }, [student.observations]);

    useEffect(() => {
        if (!studentId) return;
        const baseStudentPath = `/artifacts/${appId}/public/data/students/${studentId}`;
        
        const unsubWorkouts = onSnapshot(query(collection(db, `${baseStudentPath}/workouts`)), s => setWorkouts(s.docs.map(d => ({ id: d.id, ...d.data() }))));
        const unsubMeasurements = onSnapshot(query(collection(db, `${baseStudentPath}/measurementsHistory`), orderBy("date")), s => setMeasurements(s.docs.map(d => ({ id: d.id, ...d.data() }))));
        
        return () => {
            unsubWorkouts();
            unsubMeasurements();
        };
    }, [studentId]);

    const lastMeasurement = useMemo(() => {
        const validMeasurements = measurements.filter(m => m.weight);
        return validMeasurements.length > 0 ? validMeasurements[validMeasurements.length - 1] : student;
    }, [measurements, student]);

    const bmi = calculateBMI(lastMeasurement.weight, student.height);
    const bodyFat = calculateBodyFat(student.gender, student.height, lastMeasurement.neck, lastMeasurement.waist, lastMeasurement.hips);

    const handleUpdateProfile = async (updatedData) => {
        const studentDocRef = doc(db, `/artifacts/${appId}/public/data/students`, studentId);
        await setDoc(studentDocRef, updatedData, { merge: true });
        onStudentUpdate({ ...student, ...updatedData });
        setIsEditFormOpen(false);
    };

    const confirmDeleteWorkout = async () => {
        if (workoutToDelete) {
            await deleteDoc(doc(db, `/artifacts/${appId}/public/data/students/${studentId}/workouts/${workoutToDelete.id}`));
            setWorkoutToDelete(null);
        }
    };
    const openWorkoutFormForEdit = (workout) => {
        setEditingWorkout(workout);
        setIsWorkoutFormOpen(true);
    };

    const handleObservationsChange = (e) => {
        setObservations(e.target.value);
        setIsObservationsDirty(true);
    };

    const handleSaveObservations = async () => {
        if (!isObservationsDirty) return;
        const studentDocRef = doc(db, `/artifacts/${appId}/public/data/students`, studentId);
        try {
            await updateDoc(studentDocRef, { observations: observations });
            setIsObservationsDirty(false);
        } catch (error) {
            console.error("Error saving observations:", error);
        }
    };

    const handleApplyAiWeeklyPlan = async (weeklyPlan) => {
        const path = `/artifacts/${appId}/public/data/students/${studentId}/workouts`;
        for (const day in weeklyPlan) {
            const workoutData = weeklyPlan[day];
            // Enrich exercises with full data from library
            const enrichedExercises = workoutData.exercises.map(ex => {
                const fullEx = exerciseLibrary.find(libEx => libEx.name === ex.name);
                return fullEx ? { ...fullEx, sets: ex.sets, reps: ex.reps, rest: 60 } : null;
            }).filter(Boolean);

            await addDoc(collection(db, path), { name: workoutData.name, exercises: enrichedExercises });
        }
    };
    
    return (
        <div className="space-y-6">
            <div className="flex items-center justify-between">
                {mode !== 'independent' && <Button onClick={onBack} variant="secondary"><ArrowLeft size={20} /> Voltar</Button>}
                <div className="flex-grow"></div>
                {mode !== 'student' && (
                    <Button onClick={() => setIsEditFormOpen(true)} variant="secondary"><Edit size={16}/> Editar Perfil</Button>
                )}
            </div>
            
             <Card className="space-y-4">
                <div>
                     <h2 className="text-3xl font-bold text-white text-center md:text-left">{student.name}</h2>
                     <p className="text-gray-400 text-center md:text-left">{student.age} anos</p>
                </div>
                <div className="border-t border-gray-800 my-4"></div>
                <div className="grid grid-cols-2 lg:grid-cols-4 gap-4 text-center">
                    <div><p className="text-gray-400">Peso</p><p className="text-2xl font-bold">{lastMeasurement.weight || 'N/A'} kg</p></div>
                    <div><p className="text-gray-400">Altura</p><p className="text-2xl font-bold">{student.height || 'N/A'} cm</p></div>
                    <div><p className="text-gray-400">IMC</p><p className="text-2xl font-bold">{bmi > 0 ? bmi : 'N/A'}</p></div>
                    <div><p className="text-gray-400">% Gordura</p><p className="text-2xl font-bold">{bodyFat > 0 ? bodyFat : 'N/A'} %</p></div>
                </div>
            </Card>

            {mode === 'student' && student.observations && (
                 <Card>
                    <h3 className="text-xl font-bold text-white mb-4">Observações do seu Personal</h3>
                    <p className="text-gray-300 whitespace-pre-wrap bg-black p-4 rounded-lg">{student.observations}</p>
                </Card>
            )}

            {mode !== 'student' && (
                <Card>
                    <h3 className="text-xl font-bold text-white mb-4">Observações do Personal</h3>
                    <TextArea
                        value={observations}
                        onChange={handleObservationsChange}
                        placeholder="Adicione notas sobre o progresso, próximos passos, etc."
                        rows={5}
                    />
                    {isObservationsDirty && (
                        <Button onClick={handleSaveObservations} className="w-full mt-4">
                            <Save size={18} /> Salvar Observações
                        </Button>
                    )}
                </Card>
            )}

            <div className="flex justify-center gap-2 md:gap-4 bg-black p-2 rounded-lg flex-wrap">
                <Button onClick={() => setView('workouts')} variant={view === 'workouts' ? 'primary' : 'secondary'}><Dumbbell size={18} /> Treinos</Button>
                <Button onClick={() => setView('biometrics')} variant={view === 'biometrics' ? 'primary' : 'secondary'}><Activity size={18} /> Evolução Corporal</Button>
                <Button onClick={() => setView('attendance')} variant={view === 'attendance' ? 'primary' : 'secondary'}><Calendar size={18} /> Frequência</Button>
            </div>

            {view === 'workouts' && (
                <div className="space-y-4">
                    <div className="flex flex-wrap gap-4 justify-between items-center">
                        <h3 className="text-2xl font-semibold text-white">Planos de Treino</h3>
                        {mode !== 'student' && (
                            <div className="flex gap-2">
                                <Button onClick={() => setIsGeminiModalOpen(true)}>
                                    <Sparkles size={18} className="text-yellow-300" />
                                     Gerar com IA
                                </Button>
                                <Button onClick={() => { setEditingWorkout(null); setIsWorkoutFormOpen(true); }}><Plus size={18} /> Novo Treino</Button>
                            </div>
                        )}
                    </div>
                    {workouts.length > 0 ? workouts.map(w => (
                        <Card key={w.id} className="bg-gray-900/80">
                            <div className="flex justify-between items-center mb-4">
                                <h4 className="text-xl font-bold text-orange-400">{w.name}</h4>
                                {mode !== 'student' && (
                                    <div className="flex gap-2">
                                        <Button onClick={() => openWorkoutFormForEdit(w)} className="p-2"><Edit size={16}/></Button>
                                        <Button onClick={() => setWorkoutToDelete(w)} variant="danger" className="p-2"><Trash2 size={16}/></Button>
                                    </div>
                                )}
                            </div>
                            <div className="space-y-2">{w.exercises.map((ex, i) => (
                                <div key={i} className="flex justify-between items-center p-2 bg-black rounded">
                                    <span>{ex.name}</span>
                                    <div className="flex items-center gap-4">
                                        <span className="text-gray-400">{ex.sets}x {ex.reps}</span>
                                        <button onClick={() => setExerciseDetail(ex)} className="text-orange-400 hover:text-orange-300"><Info size={20}/></button>
                                    </div>
                                </div>
                            ))}</div>
                            <Button onClick={() => { setSelectedWorkout(w); setIsPerformanceFormOpen(true); }} className="w-full mt-4">Registrar Performance</Button>
                        </Card>
                    )) : <p className="text-gray-400 text-center py-4">Nenhum treino cadastrado.</p>}
                </div>
            )}
            {view === 'biometrics' && (
                <div className="space-y-6">
                    <div className="flex justify-between items-center"><h3 className="text-2xl font-semibold text-white">Evolução Corporal</h3></div>
                    <Card><BiometricsChart history={measurements} student={student} /></Card>
                    <AssessmentReport history={measurements} student={student} />
                </div>
            )}
            {view === 'attendance' && (
                 <div className="space-y-4">
                    <h3 className="text-2xl font-semibold text-white">Frequência e Medidas</h3>
                    <AttendanceCalendar measurements={measurements} onDateClick={(date) => setDailyUpdateDate(date)} />
                </div>
            )}

            {/* Modals */}
            <ConfirmationModal isOpen={!!workoutToDelete} onClose={() => setWorkoutToDelete(null)} onConfirm={confirmDeleteWorkout} title="Confirmar Exclusão" message={`Tem certeza que deseja excluir o treino "${workoutToDelete?.name}"? Esta ação não pode ser desfeita.`} />
            <ExerciseDetailModal isOpen={!!exerciseDetail} onClose={() => setExerciseDetail(null)} exercise={exerciseDetail} />
            <DailyUpdateModal isOpen={!!dailyUpdateDate} onClose={() => setDailyUpdateDate(null)} date={dailyUpdateDate} student={student} onStudentUpdate={onStudentUpdate} />
            <GeminiWorkoutModal isOpen={isGeminiModalOpen} onClose={() => setIsGeminiModalOpen(false)} onApplyWeeklyPlan={handleApplyAiWeeklyPlan} />
            <Modal isOpen={isEditFormOpen} onClose={() => setIsEditFormOpen(false)} title="Editar Perfil">
                <StudentForm onSave={handleUpdateProfile} onCancel={() => setIsEditFormOpen(false)} student={student} />
            </Modal>
            <Modal isOpen={isWorkoutFormOpen} onClose={() => setIsWorkoutFormOpen(false)} title={editingWorkout ? "Editar Treino" : "Criar Novo Treino"}><WorkoutForm onSave={() => setIsWorkoutFormOpen(false)} onCancel={() => setIsWorkoutFormOpen(false)} studentId={studentId} workout={editingWorkout}/></Modal>
            <Modal isOpen={isPerformanceFormOpen} onClose={() => setIsPerformanceFormOpen(false)} title="Registrar Performance">{selectedWorkout && <PerformanceForm onSave={() => setIsPerformanceFormOpen(false)} onCancel={() => setIsPerformanceFormOpen(false)} workout={selectedWorkout} studentId={studentId}/>}</Modal>
        </div>
    );
};


const TrainerDashboard = ({ userId }) => {
    const [students, setStudents] = useState([]);
    const [isStudentFormOpen, setIsStudentFormOpen] = useState(false);
    const [selectedStudent, setSelectedStudent] = useState(null);
    const [editingStudent, setEditingStudent] = useState(null);
    const [studentToDelete, setStudentToDelete] = useState(null);
    const [studentToReset, setStudentToReset] = useState(null);

    useEffect(() => {
        if (!userId) return;
        const path = `/artifacts/${appId}/public/data/students`;
        const q = query(collection(db, path), where("trainerId", "==", userId));
        const unsubscribe = onSnapshot(q, (snapshot) => {
            setStudents(snapshot.docs.map(d => ({ id: d.id, ...d.data() })));
        });
        return () => unsubscribe();
    }, [userId]);

    const handleSaveStudent = async (formData) => {
        const path = `/artifacts/${appId}/public/data/students`;
        if (editingStudent) {
            await setDoc(doc(db, path, editingStudent.id), formData, { merge: true });
        } else {
            const inviteCode = generateInviteCode();
            const newStudentData = {
                ...formData,
                trainerId: userId,
                inviteCode,
                studentUid: null 
            };
            const newDocRef = await addDoc(collection(db, path), newStudentData);
            const date = new Date().toISOString().split('T')[0];
            const initialMeasurement = { date, status: '', weight: formData.weight || '', neck: formData.neck || '', chest: formData.chest || '', waist: formData.waist || '', hips: formData.hips || '' };
            await setDoc(doc(db, `/artifacts/${appId}/public/data/students/${newDocRef.id}/measurementsHistory`, date), initialMeasurement);
        }
        setIsStudentFormOpen(false);
        setEditingStudent(null);
    };
    
    const openStudentFormForEdit = (student) => {
        setEditingStudent(student);
        setIsStudentFormOpen(true);
    };

    const confirmDeleteStudent = async () => {
        if (!studentToDelete) return;
        try {
            await deleteDoc(doc(db, `/artifacts/${appId}/public/data/students`, studentToDelete.id));
        } catch (error) {
            console.error("Error deleting student:", error);
        } finally {
            setStudentToDelete(null);
        }
    };
    
    const handleStudentUpdate = (updatedStudent) => {
        setSelectedStudent(updatedStudent);
        setStudents(prev => prev.map(s => s.id === updatedStudent.id ? updatedStudent : s));
    };

    const handleGenerateNewInviteCode = async () => {
        if (!studentToReset) return;
        const newCode = generateInviteCode();
        const studentDocRef = doc(db, `/artifacts/${appId}/public/data/students`, studentToReset.id);
        try {
            await updateDoc(studentDocRef, {
                inviteCode: newCode,
                studentUid: null
            });
        } catch (error) {
            console.error("Error generating new invite code:", error);
        } finally {
            setStudentToReset(null);
        }
    };

    if (selectedStudent) {
        return <StudentProfile student={selectedStudent} onBack={() => setSelectedStudent(null)} onStudentUpdate={handleStudentUpdate} mode="trainer" currentUserId={userId} />;
    }

    return (
        <div className="space-y-6">
            <div className="flex justify-between items-center">
                <h1 className="text-3xl font-bold text-white">Meus Alunos</h1>
                <Button onClick={() => {setEditingStudent(null); setIsStudentFormOpen(true); }}><Plus size={18} /> Criar Perfil de Aluno</Button>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {students.map(student => (
                    <Card key={student.id} className="hover:shadow-orange-500/20 hover:-translate-y-1 transition-all duration-300 flex flex-col justify-between" >
                        <div>
                            <div className="flex justify-between items-start">
                                <div className="flex-grow cursor-pointer" onClick={() => setSelectedStudent(student)}>
                                     <h3 className="text-xl font-bold text-white truncate">{student.name}</h3>
                                     <p className="text-gray-400">{student.age} anos</p>
                                </div>
                                <div className="flex flex-col gap-2">
                                     <Button onClick={(e) => {e.stopPropagation(); openStudentFormForEdit(student)}} className="p-2"><Edit size={16}/></Button>
                                     <Button onClick={(e) => {e.stopPropagation(); setStudentToDelete(student)}} variant="danger" className="p-2"><Trash2 size={16}/></Button>
                                </div>
                            </div>
                             <div className="mt-4 pt-4 border-t border-gray-700">
                                <p className="text-sm text-gray-400">Código de Convite:</p>
                                <div className="flex items-center gap-2">
                                    <p className="flex-grow font-mono text-lg text-orange-400 bg-gray-800 px-2 py-1 rounded select-all text-center">{student.inviteCode}</p>
                                    <Button onClick={(e) => {e.stopPropagation(); setStudentToReset(student)}} variant="secondary" className="p-2" title="Gerar Novo Código"><RefreshCw size={16}/></Button>
                                </div>
                            </div>
                        </div>
                        <Button onClick={() => setSelectedStudent(student)} className="w-full mt-6">Ver Perfil</Button>
                    </Card>
                ))}
            </div>
            {students.length === 0 && (
                <div className="text-center py-16 border-2 border-dashed border-gray-800 rounded-lg"><User size={48} className="mx-auto text-gray-500" /><h3 className="mt-2 text-xl font-semibold text-white">Nenhum aluno cadastrado</h3><p className="mt-1 text-gray-400">Comece criando o perfil do seu primeiro aluno.</p></div>
            )}
            <Modal isOpen={isStudentFormOpen} onClose={() => setIsStudentFormOpen(false)} title={editingStudent ? "Editar Aluno" : "Criar Perfil de Aluno"}>
                <StudentForm onSave={handleSaveStudent} onCancel={() => setIsStudentFormOpen(false)} student={editingStudent} />
            </Modal>
            <ConfirmationModal isOpen={!!studentToDelete} onClose={() => setStudentToDelete(null)} onConfirm={confirmDeleteStudent} title="Confirmar Exclusão" message={`Tem certeza que deseja excluir o perfil de "${studentToDelete?.name}"? Todos os seus dados serão perdidos permanentemente.`} />
            <ConfirmationModal isOpen={!!studentToReset} onClose={() => setStudentToReset(null)} onConfirm={handleGenerateNewInviteCode} title="Gerar Novo Código?" message={`Isso irá gerar um novo código de convite para "${studentToReset?.name}" e desvincular qualquer conta de aluno anterior. O aluno precisará se conectar novamente com o novo código. Deseja continuar?`} />
        </div>
    );
};

const StudentDashboard = ({ user, userRoleData, onRoleChange }) => {
    const [studentProfile, setStudentProfile] = useState(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState('');
    const [tempInviteCode, setTempInviteCode] = useState('');

    useEffect(() => {
        const studentDocId = userRoleData?.studentDocId;
        if (!studentDocId) {
            setIsLoading(false);
            return; 
        }
        
        setIsLoading(true);
        const studentDocRef = doc(db, `/artifacts/${appId}/public/data/students`, studentDocId);
        const unsubscribe = onSnapshot(studentDocRef, (docSnap) => {
            if (docSnap.exists()) {
                setStudentProfile({ id: docSnap.id, ...docSnap.data() });
            } else {
                setError("Perfil não encontrado. Fale com seu personal para gerar um novo convite.");
                setStudentProfile(null); 
            }
            setIsLoading(false);
        });

        return () => unsubscribe();
    }, [userRoleData]);

    const handleConnect = async () => {
        if (!tempInviteCode) {
            setError("Por favor, insira o Código de Convite.");
            return;
        }
        setError('');
        const studentsRef = collection(db, `/artifacts/${appId}/public/data/students`);
        const q = query(studentsRef, where("inviteCode", "==", tempInviteCode.trim().toUpperCase()), limit(1));
        
        try {
            const querySnapshot = await getDocs(q);
            if (querySnapshot.empty) {
                setError("Código de Convite inválido. Verifique com seu personal.");
                return;
            }

            const studentDoc = querySnapshot.docs[0];
            const studentData = studentDoc.data();

            if (studentData.studentUid) {
                setError("Este convite já foi utilizado por outro usuário.");
                return;
            }

            await updateDoc(studentDoc.ref, { studentUid: user.uid });

            const newRoleData = { role: 'student', studentDocId: studentDoc.id };
            await setDoc(doc(db, `/artifacts/${appId}/users/${user.uid}/profile/settings`), newRoleData, { merge: true });
            
            onRoleChange(newRoleData);
        } catch (e) {
            console.error("Error connecting with invite code:", e);
            setError("Ocorreu um erro ao tentar conectar.");
        }
    };

    if (isLoading) {
        return <div className="text-center py-20"><p>Carregando perfil do aluno...</p></div>;
    }

    if (!studentProfile) {
        return (
            <Card className="max-w-md mx-auto">
                <div className="space-y-4 text-center">
                    <LogIn size={48} className="mx-auto text-orange-500"/>
                    <h2 className="text-2xl font-bold">Conectar ao seu Perfil</h2>
                    <p className="text-gray-400">Insira o Código de Convite fornecido pelo seu personal trainer.</p>
                    <Input 
                        label="Código de Convite"
                        value={tempInviteCode}
                        onChange={(e) => setTempInviteCode(e.target.value)}
                        placeholder="Ex: GYM-1234"
                    />
                    {error && <p className="text-red-500 text-sm">{error}</p>}
                    <Button onClick={handleConnect} className="w-full">Conectar</Button>
                </div>
            </Card>
        );
    }

    return <StudentProfile student={studentProfile} onBack={() => {}} onStudentUpdate={setStudentProfile} mode="student" currentUserId={user.uid} />;
};

const IndependentDashboard = ({ userId }) => {
    const [profile, setProfile] = useState(null);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        const profileRef = doc(db, `/artifacts/${appId}/public/data/students`, userId);
        const unsubscribe = onSnapshot(profileRef, (docSnap) => {
            if (docSnap.exists()) {
                setProfile({ id: docSnap.id, ...docSnap.data() });
            } else {
                const initialProfile = {
                    name: "Meu Perfil",
                    age: '',
                    gender: 'male',
                    height: '',
                    weight: '',
                    trainerId: userId 
                };
                setDoc(profileRef, initialProfile).then(() => {
                    setProfile({ id: userId, ...initialProfile });
                });
            }
            setIsLoading(false);
        });
        return () => unsubscribe();
    }, [userId]);

    if (isLoading) {
        return <div className="text-center py-20"><p>Carregando seu perfil...</p></div>;
    }

    if (!profile) {
        return <div className="text-center py-20"><p>Criando seu perfil...</p></div>;
    }

    return <StudentProfile student={profile} onBack={() => {}} onStudentUpdate={setProfile} mode="independent" currentUserId={userId} />;
};


const RoleSelectionScreen = ({ onSelectRole }) => {
    return (
        <div className="flex flex-col items-center justify-center min-h-[60vh]">
            <Card className="text-center">
                <Dumbbell size={48} className="mx-auto text-orange-500 mb-4" />
                <h1 className="text-3xl font-bold text-white mb-2">Bem-vindo ao GymPro!</h1>
                <p className="text-gray-400 mb-8">Como você gostaria de usar o aplicativo?</p>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <button onClick={() => onSelectRole('trainer')} className="p-6 bg-gray-800 hover:bg-gray-700 rounded-lg transition-colors duration-200">
                        <Users size={32} className="mx-auto mb-2" />
                        <h2 className="font-bold">Sou Personal</h2>
                        <p className="text-sm text-gray-400">Gerenciar múltiplos alunos.</p>
                    </button>
                    <button onClick={() => onSelectRole('student')} className="p-6 bg-gray-800 hover:bg-gray-700 rounded-lg transition-colors duration-200">
                        <CheckCircle size={32} className="mx-auto mb-2" />
                        <h2 className="font-bold">Sou Aluno</h2>
                        <p className="text-sm text-gray-400">Acessar meu treino.</p>
                    </button>
                    <button onClick={() => onSelectRole('independent')} className="p-6 bg-gray-800 hover:bg-gray-700 rounded-lg transition-colors duration-200">
                        <User size={32} className="mx-auto mb-2" />
                        <h2 className="font-bold">Treinar Sozinho</h2>
                        <p className="text-sm text-gray-400">Montar meu próprio treino.</p>
                    </button>
                </div>
            </Card>
        </div>
    );
};


// --- COMPONENTES DE WORKOUT E GEMINI ---

const GeminiWorkoutModal = ({ isOpen, onClose, onApplyWeeklyPlan }) => {
    const [goal, setGoal] = useState('');
    const [level, setLevel] = useState('iniciante');
    const [duration, setDuration] = useState('45');
    const [isGenerating, setIsGenerating] = useState(false);
    const [error, setError] = useState('');

    const handleGenerate = async () => {
        if (!goal) {
            setError("Por favor, descreva o objetivo do treino.");
            return;
        }
        setIsGenerating(true);
        setError('');

        const exerciseNames = exerciseLibrary.map(e => e.name).join(', ');
        const prompt = `
            Você é um assistente de personal trainer. Crie um plano de treino semanal completo com o seguinte objetivo: "${goal}".
            O nível do praticante é ${level} e a duração desejada de cada sessão de treino é de aproximadamente ${duration} minutos.
            Distribua os treinos ao longo da semana (ex: 3 a 5 dias), com dias de descanso.
            Para cada dia de treino, crie um objeto com uma chave "name" (ex: "Treino A - Peito e Tríceps") e uma chave "exercises".
            A chave "exercises" deve ser um array de objetos, cada um com "name", "sets", e "reps".
            O valor de "name" deve ser EXATAMENTE como na lista de exercícios fornecida: ${exerciseNames}.
            O valor de "sets" e "reps" deve ser uma string (ex: "3", "10-12").
            Sua resposta DEVE ser um único objeto JSON, onde as chaves são os dias da semana (ex: "Segunda-feira", "Terça-feira", etc.) e os valores são os objetos de treino.
            Exemplo de resposta: {"Segunda-feira": {"name": "Treino A - Peito e Tríceps", "exercises": [{"name": "Supino Reto com Barra", "sets": "3", "reps": "10"}]}, "Quarta-feira": {"name": "Treino B - Costas", "exercises": [{"name": "Remada Curvada", "sets": "4", "reps": "8"}]}}
        `;

        try {
            let chatHistory = [{ role: "user", parts: [{ text: prompt }] }];
            const payload = {
                contents: chatHistory,
                generationConfig: { 
                    responseMimeType: "application/json",
                }
            };
            const apiKey = "";
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });
            
            if (!response.ok) {
                throw new Error(`API Error: ${response.statusText}`);
            }

            const result = await response.json();
            
            if (result.candidates && result.candidates.length > 0 &&
                result.candidates[0].content && result.candidates[0].content.parts &&
                result.candidates[0].content.parts.length > 0) {
                
                const text = result.candidates[0].content.parts[0].text;
                const weeklyPlan = JSON.parse(text);
                
                onApplyWeeklyPlan(weeklyPlan);
                onClose();
            } else {
                throw new Error("Resposta da API inválida ou vazia.");
            }
        } catch (e) {
            console.error("Erro ao gerar treino:", e);
            setError("Não foi possível gerar o treino. A IA pode ter retornado um formato inesperado. Tente ser mais específico no objetivo.");
        } finally {
            setIsGenerating(false);
        }
    };

    return (
        <Modal isOpen={isOpen} onClose={onClose} title="Gerar Plano de Treino Semanal com IA">
            <div className="space-y-4">
                <TextArea
                    label="Descreva o objetivo do treino"
                    placeholder="Ex: Hipertrofia para peitoral e tríceps, com foco em força."
                    value={goal}
                    onChange={(e) => setGoal(e.target.value)}
                    rows={3}
                />
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <Select label="Nível de Treinamento" value={level} onChange={e => setLevel(e.target.value)}>
                        <option value="iniciante">Iniciante</option>
                        <option value="experiente">Experiente</option>
                        <option value="avancado">Avançado</option>
                    </Select>
                    <Select label="Duração de cada Treino" value={duration} onChange={e => setDuration(e.target.value)}>
                        <option value="30">~30 min</option>
                        <option value="45">~45 min</option>
                        <option value="60">~60 min</option>
                        <option value="90">~90 min</option>
                    </Select>
                </div>
                {error && <p className="text-red-500 text-sm">{error}</p>}
                <div className="flex justify-end gap-4">
                    <Button variant="secondary" onClick={onClose}>Cancelar</Button>
                    <Button onClick={handleGenerate} disabled={isGenerating}>
                        <Sparkles size={18} className="text-yellow-300" />
                        {isGenerating ? 'Gerando...' : 'Gerar Plano Semanal'}
                    </Button>
                </div>
            </div>
        </Modal>
    );
};

const WorkoutForm = ({ onSave, onCancel, studentId, workout }) => {
    const [workoutName, setWorkoutName] = useState(workout?.name || '');
    const [exercises, setExercises] = useState(workout?.exercises || []);
    const [isExercisePickerOpen, setIsExercisePickerOpen] = useState(false);
    const [exerciseDetail, setExerciseDetail] = useState(null);
    const [searchTerm, setSearchTerm] = useState('');
    
    const addExercise = (exercise) => { setExercises(prev => [...prev, { ...exercise, sets: 3, reps: '10-12', rest: 60 }]); };
    const removeExercise = (index) => { setExercises(exercises.filter((_, i) => i !== index)); };
    const updateExerciseField = (index, field, value) => { const newExercises = [...exercises]; newExercises[index][field] = value; setExercises(newExercises); };
    
    const handleSubmit = async (e) => {
        e.preventDefault();
        const workoutData = { name: workoutName, exercises };
        const path = `/artifacts/${appId}/public/data/students/${studentId}/workouts`;
        if (workout?.id) { await setDoc(doc(db, path, workout.id), workoutData); } else { await addDoc(collection(db, path), workoutData); }
        onSave();
    };
    
    const filteredLibrary = exerciseLibrary.filter(ex => ex.name.toLowerCase().includes(searchTerm.toLowerCase()) || ex.muscleGroup.toLowerCase().includes(searchTerm.toLowerCase()));
    
    return (
        <>
            <form onSubmit={handleSubmit} className="space-y-6">
                <Input label="Nome do Treino (Ex: Treino A - Peito e Tríceps)" value={workoutName} onChange={e => setWorkoutName(e.target.value)} required />
                <div className="space-y-4">
                    <h3 className="text-lg font-semibold text-white">Exercícios</h3>
                    {exercises.map((ex, index) => (
                        <Card key={index} className="bg-gray-800">
                            <div className="flex justify-between items-start">
                                <div>
                                    <p className="font-bold text-orange-400">{ex.name}</p>
                                    <p className="text-sm text-gray-400">{ex.muscleGroup}</p>
                                </div>
                                <Button variant="danger" onClick={() => removeExercise(index)} className="px-2 py-1"><Trash2 size={16}/></Button>
                            </div>
                            <div className="grid grid-cols-3 gap-4 mt-4">
                                <Input label="Séries" type="number" value={ex.sets} onChange={e => updateExerciseField(index, 'sets', e.target.value)} />
                                <Input label="Reps" value={ex.reps} onChange={e => updateExerciseField(index, 'reps', e.target.value)} />
                                <Input label="Descanso (s)" type="number" value={ex.rest} onChange={e => updateExerciseField(index, 'rest', e.target.value)} />
                            </div>
                        </Card>
                    ))}
                </div>
                <div className="flex gap-4">
                    <Button type="button" variant="secondary" onClick={() => setIsExercisePickerOpen(true)}><Plus size={18} /> Adicionar Exercício</Button>
                </div>
                <div className="flex justify-end gap-4 pt-4 border-t border-gray-800">
                    <Button type="button" variant="secondary" onClick={onCancel}>Cancelar</Button>
                    <Button type="submit">{workout ? 'Salvar Alterações' : 'Criar Treino'}</Button>
                </div>
            </form>
            <Modal isOpen={isExercisePickerOpen} onClose={() => setIsExercisePickerOpen(false)} title="Selecione um Exercício">
                <ExerciseDetailModal isOpen={!!exerciseDetail} onClose={() => setExerciseDetail(null)} exercise={exerciseDetail} zIndex="z-[60]" />
                <div className="mb-4 relative"><Input placeholder="Buscar por nome ou músculo..." value={searchTerm} onChange={e => setSearchTerm(e.target.value)} /><Search size={18} className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400"/></div>
                <div className="space-y-2 max-h-[60vh] overflow-y-auto">
                    {filteredLibrary.map(ex => (
                        <div key={ex.id} className="flex items-center justify-between p-4 bg-gray-800 rounded-lg hover:bg-gray-700 transition-colors duration-200">
                            <div onClick={() => addExercise(ex)} className="flex-grow cursor-pointer">
                                <p className="font-bold text-white">{ex.name}</p>
                                <p className="text-sm text-gray-300">{ex.muscleGroup}</p>
                            </div>
                            <button onClick={() => setExerciseDetail(ex)} className="ml-4 text-orange-400 hover:text-orange-300">
                                <Info size={24}/>
                            </button>
                        </div>
                    ))}
                </div>
            </Modal>
        </>
    );
};

const PerformanceForm = ({ onSave, onCancel, workout, studentId }) => {
    const [performanceData, setPerformanceData] = useState(() => { const initialState = {}; workout.exercises.forEach(ex => { initialState[ex.id] = Array.from({ length: ex.sets }, () => ({ reps: '', weight: '' })); }); return initialState; });
    const handleInputChange = (exerciseId, setIndex, field, value) => { setPerformanceData(prev => ({ ...prev, [exerciseId]: prev[exerciseId].map((set, i) => i === setIndex ? { ...set, [field]: value } : set) })); };
    const handleSubmit = async (e) => { e.preventDefault(); const log = { studentId, workoutId: workout.id, workoutName: workout.name, date: new Date().toISOString(), performance: performanceData, }; await addDoc(collection(db, `/artifacts/${appId}/public/data/students/${studentId}/performance`), log); onSave(); };
    return (
        <form onSubmit={handleSubmit} className="space-y-6"><h3 className="text-xl font-bold text-white">Registrar Treino: <span className="text-orange-400">{workout.name}</span></h3><div className="space-y-4 max-h-[60vh] overflow-y-auto pr-2">{workout.exercises.map(ex => (<Card key={ex.id} className="bg-gray-800"><p className="font-bold text-orange-400 mb-2">{ex.name}</p><div className="space-y-2">{Array.from({ length: ex.sets }).map((_, setIndex) => (<div key={setIndex} className="grid grid-cols-3 gap-4 items-center"><span className="text-gray-300 font-semibold">Série {setIndex + 1}</span><Input placeholder="Reps" type="number" value={performanceData[ex.id]?.[setIndex]?.reps || ''} onChange={e => handleInputChange(ex.id, setIndex, 'reps', e.target.value)} /><Input placeholder="Peso (kg)" type="number" value={performanceData[ex.id]?.[setIndex]?.weight || ''} onChange={e => handleInputChange(ex.id, setIndex, 'weight', e.target.value)} /></div>))}</div></Card>))}</div><div className="flex justify-end gap-4 pt-4 border-t border-gray-800"><Button type="button" variant="secondary" onClick={onCancel}>Cancelar</Button><Button type="submit">Salvar Registro</Button></div></form>
    );
};


// --- APP PRINCIPAL ---
export default function App() {
    const [user, setUser] = useState(null);
    const [userRoleData, setUserRoleData] = useState(null);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        const authAndListen = async () => {
            try {
                // Para o ambiente local e APK, sempre usamos o login anônimo.
                await signInAnonymously(auth);
            } catch (error) { console.error("Authentication error:", error); }
        };

        const unsubscribe = onAuthStateChanged(auth, async (currentUser) => {
            if (currentUser) {
                setUser(currentUser);
                const userDocRef = doc(db, `/artifacts/${appId}/users/${currentUser.uid}/profile/settings`);
                const userDocSnap = await getDoc(userDocRef);
                if (userDocSnap.exists()) {
                    setUserRoleData(userDocSnap.data());
                } else {
                    setUserRoleData(null); // Nenhum papel definido ainda
                }
            } else {
                setUser(null);
                setUserRoleData(null);
            }
            setIsLoading(false);
        });
        
        authAndListen();
        return () => unsubscribe();
    }, []);

    const handleSelectRole = async (role) => {
        if (user) {
            const roleData = { role };
            await setDoc(doc(db, `/artifacts/${appId}/users/${user.uid}/profile/settings`), roleData);
            setUserRoleData(roleData);
        }
    };

    const handleChangeRole = async () => {
        if (user) {
            await setDoc(doc(db, `/artifacts/${appId}/users/${user.uid}/profile/settings`), { role: null });
            setUserRoleData(null);
        }
    };

    const renderContent = () => {
        if (isLoading) {
            return <div className="text-center py-20"><p>Carregando...</p></div>;
        }
        if (!user) {
            return <div className="text-center py-20"><p>Erro de autenticação. Por favor, recarregue a página.</p></div>;
        }
        if (!userRoleData?.role) {
            return <RoleSelectionScreen onSelectRole={handleSelectRole} />;
        }

        switch (userRoleData.role) {
            case 'trainer':
                return <TrainerDashboard userId={user.uid} />;
            case 'student':
                return <StudentDashboard user={user} userRoleData={userRoleData} onRoleChange={setUserRoleData} />;
            case 'independent':
                return <IndependentDashboard userId={user.uid} />;
            default:
                return <RoleSelectionScreen onSelectRole={handleSelectRole} />;
        }
    };

    return (
        <div className="bg-black text-gray-200 min-h-screen font-sans">
            <header className="bg-black/50 backdrop-blur-sm sticky top-0 z-40 p-4 shadow-lg">
                <div className="container mx-auto flex items-center justify-between">
                    <div className="flex items-center gap-4">
                        <Dumbbell className="text-orange-500" size={32} />
                        <h1 className="text-2xl font-bold text-white">GymPro Trainer</h1>
                    </div>
                    {userRoleData?.role && (
                        <Button variant="secondary" onClick={handleChangeRole} className="flex items-center gap-2">
                           <LogOut size={16} /> Trocar Perfil
                        </Button>
                    )}
                </div>
            </header>
            <main className="container mx-auto p-4 md:p-8">
                {renderContent()}
            </main>
            <footer className="text-center p-4 text-gray-500 text-sm">
                <p>App de Treino v8.2. Seu ID de usuário (para Personal):</p>
                <p className="font-mono text-xs mt-1 select-all">{user ? user.uid : 'N/A'}</p>
            </footer>
        </div>
    );
}
